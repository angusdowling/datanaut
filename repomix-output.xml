This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
packages/
  backend/
    Api/
      Configuration/
        WebApplicationBuilderExtensions.cs
        WebApplicationExtensions.cs
      Controllers/
        AuthController.cs
        ColumnsController.cs
        RowsController.cs
        TablesController.cs
        TenantsController.cs
        UsersController.cs
        WorkspacesController.cs
      Data/
        AppColumnRepository.cs
        AppRowRepository.cs
        AppTableRepository.cs
        IMarkerInterface.cs
        IRefreshTokenRepository.cs
        IRepository.cs
        LoginTokenRepository.cs
        RefreshTokenRepository.cs
        RoleRepository.cs
        TenantRepository.cs
        UserRepository.cs
        WorkspaceRepository.cs
      Models/
        AuthenticationModels.cs
        CreateColumnRequest.cs
        CreateRowRequest.cs
        CreateTableRequest.cs
        CreateTenantRequest.cs
        CreateUserRequest.cs
        CreateWorkspaceRequest.cs
        UpdateColumnRequest.cs
      Services/
        AuthService.cs
        IAuthService.cs
        IRefreshTokenService.cs
        IService.cs
        JwtService.cs
        LoginTokenService.cs
        RefreshTokenService.cs
        TenantService.cs
        UserService.cs
    Models/
      AppColumn.cs
      ApplicationDbContext.cs
      AppRow.cs
      AppTable.cs
      Current.cs
      LoginToken.cs
      Migration.cs
      RefreshToken.cs
      Role.cs
      Tenant.cs
      User.cs
      Workspace.cs
    Properties/
      launchSettings.json
    .envrc
    .gitignore
    appsettings.Development.json
    appsettings.json
    backend.csproj
    backend.http
    Program.cs
  database/
    migrations/
      committed/
        000001.sql
        000002.sql
        000003.sql
        000004.sql
      current.sql
    .envrc
    .gmrc
    package.json
    README.md
  frontend/
    .vite/
      deps/
        _metadata.json
        package.json
    app/
      components/
        DataTable/
          DataTable.module.scss
          index.tsx
        EditableCell.tsx
        Pagination.tsx
        Swagger.tsx
        TableHeader.tsx
        TableRow.tsx
        types.tsx
      features/
        tables/
          TablesTable.tsx
        tenants/
          TenantsTable.tsx
        users/
          UsersTable.tsx
        workspaces/
          WorkspacesTable.tsx
      routes/
        dashboard/
          route.tsx
        dashboard.users/
          route.tsx
        dashboard.users.$userId/
          route.tsx
        dashboard.workspaces/
          route.tsx
        dashboard.workspaces.$workspaceId/
          route.tsx
        dashboard.workspaces.$workspaceId.tables.$tableId/
          route.tsx
        login/
          route.tsx
        verify/
          route.tsx
        _index.tsx
        tenants.$id.users.tsx
        tenants.tsx
      services/
        api/
          auth/
            auth.ts
          columns/
            columns.ts
          model/
            appColumn.ts
            appRow.ts
            appTable.ts
            authResponse.ts
            createColumnRequest.ts
            createRowRequest.ts
            createTableRequest.ts
            createTenantRequest.ts
            createUserRequest.ts
            createWorkspaceRequest.ts
            getApiColumnsParams.ts
            getApiRowsParams.ts
            getApiTablesParams.ts
            getApiWorkspacesParams.ts
            getColumnsParams.ts
            getRowsParams.ts
            getTablesParams.ts
            getWorkspacesParams.ts
            index.ts
            loginRequest.ts
            loginResponse.ts
            refreshToken.ts
            role.ts
            tenant.ts
            user.ts
            userResponse.ts
            verifyRequest.ts
            workspace.ts
          rows/
            rows.ts
          tables/
            tables.ts
          tenants/
            tenants.ts
          users/
            users.ts
          workspaces/
            workspaces.ts
      types/
        scss.d.ts
      utilities/
        api.ts
        auth.ts
        debounce.ts
      entry.client.tsx
      entry.server.tsx
      root.tsx
    .eslintrc.cjs
    .gitignore
    orval.config.ts
    package.json
    postcss.config.js
    README.md
    tsconfig.json
    vite.config.ts
.gitignore
datanaut.sln
docker-compose.yml
LICENSE
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="packages/backend/Api/Configuration/WebApplicationExtensions.cs">
public static class WebApplicationExtensions
⋮----
public static WebApplication ConfigureMiddleware(this WebApplication app)
⋮----
if (app.Environment.IsDevelopment())
⋮----
app.UseSwagger();
app.UseSwaggerUI();
⋮----
app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();
⋮----
public static WebApplication ConfigureEndpoints(this WebApplication app)
⋮----
app.MapControllers();
</file>

<file path="packages/backend/Api/Data/IMarkerInterface.cs">
/// <summary>
/// Marker interface for all repositories in the application
/// </summary>
public interface IRepositoryMarker { }
⋮----
/// Marker interface for all services in the application
⋮----
public interface IServiceMarker { }
</file>

<file path="packages/backend/Api/Data/IRefreshTokenRepository.cs">
public interface IRefreshTokenRepository : IRepositoryMarker
⋮----
Task<IEnumerable<RefreshToken>> GetAllAsync();
Task<RefreshToken?> GetByIdAsync(Guid id);
Task<RefreshToken> CreateAsync(RefreshToken entity);
Task DeleteAsync(Guid id);
Task<IEnumerable<RefreshToken>> FindAsync(Expression<Func<RefreshToken, bool>> predicate);
Task<RefreshToken> UpdateAsync(RefreshToken entity);
Task<RefreshToken?> GetByTokenAsync(string token);
Task RevokeDescendantsAsync(RefreshToken token, string reason);
</file>

<file path="packages/backend/Api/Data/IRepository.cs">
public interface IRepository<T> : IRepositoryMarker
where T : class
⋮----
Task<IEnumerable<T>> GetAllAsync();
Task<T?> GetByIdAsync(Guid id);
Task<T> CreateAsync(T entity);
Task DeleteAsync(Guid id);
Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);
⋮----
virtual Task<T> UpdateAsync(T entity)
⋮----
throw new NotImplementedException(
</file>

<file path="packages/backend/Api/Data/RefreshTokenRepository.cs">
public class RefreshTokenRepository : IRefreshTokenRepository
⋮----
private readonly ApplicationDbContext _context;
⋮----
public async Task<IEnumerable<RefreshToken>> GetAllAsync()
⋮----
return await _context.RefreshTokens.ToListAsync();
⋮----
public async Task<RefreshToken?> GetByIdAsync(Guid id)
⋮----
return await _context.RefreshTokens.FindAsync(id);
⋮----
public async Task<RefreshToken> CreateAsync(RefreshToken token)
⋮----
_context.RefreshTokens.Add(token);
await _context.SaveChangesAsync();
⋮----
public async Task<RefreshToken> UpdateAsync(RefreshToken token)
⋮----
_context.RefreshTokens.Update(token);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var token = await _context.RefreshTokens.FindAsync(id);
⋮----
_context.RefreshTokens.Remove(token);
⋮----
public async Task<IEnumerable<RefreshToken>> FindAsync(
⋮----
return await _context.RefreshTokens.Where(predicate).ToListAsync();
⋮----
public async Task<RefreshToken?> GetByTokenAsync(string token)
⋮----
.RefreshTokens.Include(rt => rt.User)
.FirstOrDefaultAsync(rt => rt.Token == token);
⋮----
public async Task RevokeDescendantsAsync(RefreshToken token, string reason)
⋮----
.RefreshTokens.Where(rt => rt.ReplacedByToken == token.Token)
.ToListAsync();
</file>

<file path="packages/backend/Api/Models/CreateColumnRequest.cs">
public class CreateColumnRequest
</file>

<file path="packages/backend/Api/Models/CreateRowRequest.cs">
public class CreateRowRequest
</file>

<file path="packages/backend/Api/Models/CreateTableRequest.cs">
public class CreateTableRequest
</file>

<file path="packages/backend/Api/Models/CreateTenantRequest.cs">
public class CreateTenantRequest
</file>

<file path="packages/backend/Api/Models/CreateUserRequest.cs">
public class CreateUserRequest
</file>

<file path="packages/backend/Api/Models/CreateWorkspaceRequest.cs">
public class CreateWorkspaceRequest
</file>

<file path="packages/backend/Api/Models/UpdateColumnRequest.cs">

</file>

<file path="packages/backend/Api/Services/IRefreshTokenService.cs">
public interface IRefreshTokenService : IServiceMarker
⋮----
Task<IEnumerable<RefreshToken>> GetAllAsync();
Task<RefreshToken?> GetByIdAsync(Guid id);
Task<RefreshToken> CreateAsync(RefreshToken entity);
Task<RefreshToken> UpdateAsync(RefreshToken entity);
Task DeleteAsync(Guid id);
Task<IEnumerable<RefreshToken>> FindAsync(Expression<Func<RefreshToken, bool>> predicate);
Task<RefreshToken?> GetByTokenAsync(string token);
Task RevokeDescendantsAsync(RefreshToken token, string reason);
</file>

<file path="packages/backend/Api/Services/IService.cs">
public interface IService<T> : IServiceMarker
where T : class
⋮----
Task<IEnumerable<T>> GetAllAsync();
Task<T?> GetByIdAsync(Guid id);
Task<T> CreateAsync(T entity);
Task<T> UpdateAsync(T entity);
Task DeleteAsync(Guid id);
Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);
</file>

<file path="packages/backend/Api/Services/LoginTokenService.cs">
public class LoginTokenService : IService<LoginToken>
⋮----
public async Task<IEnumerable<LoginToken>> GetAllAsync()
⋮----
return await _loginTokenRepository.GetAllAsync();
⋮----
public async Task<LoginToken?> GetByIdAsync(Guid id)
⋮----
return await _loginTokenRepository.GetByIdAsync(id);
⋮----
public async Task<LoginToken> CreateAsync(LoginToken token)
⋮----
return await _loginTokenRepository.CreateAsync(token);
⋮----
public async Task<LoginToken> UpdateAsync(LoginToken token)
⋮----
return await _loginTokenRepository.UpdateAsync(token);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
await _loginTokenRepository.DeleteAsync(id);
⋮----
public async Task<IEnumerable<LoginToken>> FindAsync(
⋮----
return await _loginTokenRepository.FindAsync(predicate);
</file>

<file path="packages/backend/Api/Services/RefreshTokenService.cs">
public class RefreshTokenService : IRefreshTokenService
⋮----
private readonly IRefreshTokenRepository _refreshTokenRepository;
⋮----
public async Task<IEnumerable<RefreshToken>> GetAllAsync()
⋮----
return await _refreshTokenRepository.GetAllAsync();
⋮----
public async Task<RefreshToken?> GetByIdAsync(Guid id)
⋮----
return await _refreshTokenRepository.GetByIdAsync(id);
⋮----
public async Task<RefreshToken> CreateAsync(RefreshToken token)
⋮----
return await _refreshTokenRepository.CreateAsync(token);
⋮----
public async Task<RefreshToken> UpdateAsync(RefreshToken token)
⋮----
return await _refreshTokenRepository.UpdateAsync(token);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
await _refreshTokenRepository.DeleteAsync(id);
⋮----
public async Task<IEnumerable<RefreshToken>> FindAsync(
⋮----
return await _refreshTokenRepository.FindAsync(predicate);
⋮----
public async Task<RefreshToken?> GetByTokenAsync(string token)
⋮----
return await _refreshTokenRepository.GetByTokenAsync(token);
⋮----
public async Task RevokeDescendantsAsync(RefreshToken token, string reason)
⋮----
await _refreshTokenRepository.RevokeDescendantsAsync(token, reason);
</file>

<file path="packages/backend/Models/AppColumn.cs">
public partial class AppColumn
</file>

<file path="packages/backend/Models/AppRow.cs">
public partial class AppRow
</file>

<file path="packages/backend/Models/AppTable.cs">
public partial class AppTable
</file>

<file path="packages/backend/Models/Current.cs">
public partial class Current
</file>

<file path="packages/backend/Models/LoginToken.cs">
public partial class LoginToken
</file>

<file path="packages/backend/Models/Migration.cs">
public partial class Migration
</file>

<file path="packages/backend/Models/RefreshToken.cs">
public partial class RefreshToken
</file>

<file path="packages/backend/Models/Role.cs">
public partial class Role
</file>

<file path="packages/backend/Models/Tenant.cs">
public partial class Tenant
</file>

<file path="packages/backend/Models/Workspace.cs">
public partial class Workspace
</file>

<file path="packages/backend/Properties/launchSettings.json">
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:42537",
      "sslPort": 44398
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5104",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7117;http://localhost:5104",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
</file>

<file path="packages/backend/.envrc">
dotenv
</file>

<file path="packages/backend/.gitignore">
# .NET Core build folders
bin/
obj/

# Visual Studio files
.vs/
*.user
*.userosscache
*.sln.docstates
*.suo
*.userprefs
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
*.swp
*.*~
project.lock.json
.DS_Store
*.pyc

# Visual Studio Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Rider
.idea/
*.sln.iml

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio cache/options directory
.vs/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.tlog
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
Upgrade*[Cc]ode
Upgrade*[Xx]ml
Upgrade*[Vv]b
Upgrade*[Vv]cs
Upgrade*.config
Upgrade*.htm

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio 6 auto-generated project file (contains which files were open etc.)
*.vbp

# Visual Studio 6 auto-generated project file (contains which files were open etc.)
*.vpj

# Visual Studio 6 auto-generated web project file (contains which files were open etc.)
*.webinfo
</file>

<file path="packages/backend/appsettings.Development.json">
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
</file>

<file path="packages/backend/backend.csproj">
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <RootNamespace>Datanaut</RootNamespace>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.0" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="8.0.0" />
    <PackageReference Include="Scrutor" Version="4.2.2" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.0">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.0" />
  </ItemGroup>

</Project>
</file>

<file path="packages/backend/Program.cs">
var builder = WebApplication.CreateBuilder(args);
⋮----
// Configure the application
⋮----
.ConfigureServices()
.ConfigureAuthentication()
.ConfigureDatabase()
.ConfigureDependencyInjection();
⋮----
var app = builder.Build();
⋮----
// Configure middleware and endpoints
app.ConfigureMiddleware().ConfigureEndpoints();
⋮----
app.Run();
</file>

<file path="packages/database/migrations/committed/000001.sql">
--! Previous: -
--! Hash: sha1:b16552e1b65ca18a2323f5789e2a6290be8e9332

-- Create extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create workspaces table
drop table if exists workspaces cascade;
CREATE TABLE workspaces (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create app_tables table
drop table if exists app_tables cascade;
CREATE TABLE app_tables (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
  created_by UUID NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(workspace_id, name)
);

-- Create app_columns table
drop table if exists app_columns cascade;
CREATE TABLE app_columns (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  table_id UUID NOT NULL REFERENCES app_tables(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  type TEXT NOT NULL CHECK (type IN (
    'single_line_text', 'long_text', 'link_to_record', 'attachment',
    'checkbox', 'multi_select', 'single_select', 'user', 'date',
    'phone_number', 'email', 'url', 'number', 'currency', 'percent',
    'duration', 'rating', 'formula', 'rollup', 'count', 'lookup',
    'created_time', 'last_modified_time', 'created_by', 'last_modified_by',
    'autonumber'
  )),
  config JSONB, -- Type-specific configuration (e.g. formula, rollup settings, currency format)
  position INTEGER NOT NULL,
  is_required BOOLEAN NOT NULL DEFAULT false,
  options JSONB, -- For select/multiselect types
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(table_id, name)
);

-- Create app_rows table
drop table if exists app_rows cascade;
CREATE TABLE app_rows (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  table_id UUID NOT NULL REFERENCES app_tables(id) ON DELETE CASCADE,
  data JSONB NOT NULL DEFAULT '{}',
  created_by UUID NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX idx_app_tables_workspace ON app_tables(workspace_id);
CREATE INDEX idx_app_columns_table ON app_columns(table_id);
CREATE INDEX idx_app_rows_table ON app_rows(table_id);
CREATE INDEX idx_app_rows_data ON app_rows USING gin(data);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add updated_at triggers
CREATE TRIGGER update_workspaces_updated_at
  BEFORE UPDATE ON workspaces
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_app_tables_updated_at
  BEFORE UPDATE ON app_tables
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_app_columns_updated_at
  BEFORE UPDATE ON app_columns
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_app_rows_updated_at
  BEFORE UPDATE ON app_rows
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at();

-- Create function to validate row data against column definitions
CREATE OR REPLACE FUNCTION validate_row_data()
RETURNS TRIGGER AS $$
DECLARE
  column_record RECORD;
  value JSONB;
  value_type TEXT;
BEGIN
  -- Check all required columns are present
  FOR column_record IN
    SELECT name, type, is_required
    FROM app_columns
    WHERE table_id = NEW.table_id
  LOOP
    value := NEW.data->column_record.name;
    
    IF column_record.is_required AND value IS NULL THEN
      RAISE EXCEPTION 'Column % is required', column_record.name;
    END IF;
    
    IF value IS NOT NULL THEN
      CASE column_record.type
        WHEN 'single_line_text', 'long_text', 'phone_number', 'email', 'url' THEN
          IF jsonb_typeof(value) != 'string' THEN
            RAISE EXCEPTION 'Column % must be text', column_record.name;
          END IF;
        WHEN 'number', 'currency', 'percent', 'duration', 'rating', 'autonumber' THEN
          IF jsonb_typeof(value) NOT IN ('number') THEN
            RAISE EXCEPTION 'Column % must be a number', column_record.name;
          END IF;
        WHEN 'checkbox' THEN
          IF jsonb_typeof(value) != 'boolean' THEN
            RAISE EXCEPTION 'Column % must be boolean', column_record.name;
          END IF;
        WHEN 'date', 'created_time', 'last_modified_time' THEN
          IF jsonb_typeof(value) != 'string' OR
             value::text !~ '^"\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:?\d{2})?)?"$' THEN
            RAISE EXCEPTION 'Column % must be a valid ISO date string', column_record.name;
          END IF;
        WHEN 'single_select' THEN
          IF jsonb_typeof(value) != 'string' OR
             NOT EXISTS (SELECT 1 FROM jsonb_array_elements_text(column_record.config->'options') opt WHERE opt = value#>>'{}') THEN
            RAISE EXCEPTION 'Column % must be one of the defined options', column_record.name;
          END IF;
        WHEN 'multi_select' THEN
          IF jsonb_typeof(value) != 'array' OR
             EXISTS (
               SELECT 1 FROM jsonb_array_elements_text(value) val
               WHERE NOT EXISTS (SELECT 1 FROM jsonb_array_elements_text(column_record.config->'options') opt WHERE opt = val)
             ) THEN
            RAISE EXCEPTION 'Column % values must be from the defined options', column_record.name;
          END IF;
        WHEN 'link_to_record' THEN
          IF jsonb_typeof(value) NOT IN ('string', 'array') OR
             (jsonb_typeof(value) = 'array' AND EXISTS (
               SELECT 1 FROM jsonb_array_elements_text(value) val
               WHERE NOT EXISTS (SELECT 1 FROM app_rows WHERE id::text = val)
             )) OR
             (jsonb_typeof(value) = 'string' AND NOT EXISTS (SELECT 1 FROM app_rows WHERE id::text = value#>>'{}')) THEN
            RAISE EXCEPTION 'Column % must reference valid record(s)', column_record.name;
          END IF;
        WHEN 'user', 'created_by', 'last_modified_by' THEN
          IF jsonb_typeof(value) != 'string' OR NOT uuid_is_valid(value#>>'{}') THEN
            RAISE EXCEPTION 'Column % must be a valid user ID', column_record.name;
          END IF;
        WHEN 'attachment' THEN
          IF jsonb_typeof(value) != 'array' OR
             EXISTS (
               SELECT 1 FROM jsonb_array_elements(value) att
               WHERE att->>'url' IS NULL OR att->>'filename' IS NULL
             ) THEN
            RAISE EXCEPTION 'Column % must contain valid attachments', column_record.name;
          END IF;
      END CASE;
    END IF;
  END LOOP;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add data validation trigger
CREATE TRIGGER validate_app_rows_data
  BEFORE INSERT OR UPDATE ON app_rows
  FOR EACH ROW
  EXECUTE FUNCTION validate_row_data();
</file>

<file path="packages/database/migrations/committed/000002.sql">
--! Previous: sha1:b16552e1b65ca18a2323f5789e2a6290be8e9332
--! Hash: sha1:e043f3615502424d101c203b535ccadf24673ad2

-- Create roles table
drop table if exists roles cascade;
create table roles (
  id uuid primary key default gen_random_uuid(),
  name text not null unique,
  permissions jsonb not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Create tenants table
drop table if exists tenants cascade;
create table tenants (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Create multi-tenant users table
drop table if exists users cascade;
create table users (
  id uuid primary key default gen_random_uuid(),
  tenant_id uuid not null,
  role_id uuid not null,
  email text not null unique,
  name text not null,
  password_hash text not null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  foreign key (tenant_id) references tenants(id),
  foreign key (role_id) references roles(id)
);

-- Create index for tenant_id to improve query performance
create index idx_users_tenant_id on users(tenant_id);

-- Enable row level security
alter table users enable row level security;
alter table workspaces enable row level security;
alter table app_tables enable row level security;
alter table app_columns enable row level security;
alter table app_rows enable row level security;

-- Create row level security policies
drop policy if exists select_own_users on users cascade;
create policy select_own_users on users
  for select using (tenant_id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists insert_own_users on users cascade;
create policy insert_own_users on users
  for insert with check (tenant_id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists update_own_users on users cascade;
create policy update_own_users on users
  for update using (tenant_id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists delete_own_users on users cascade;
create policy delete_own_users on users
  for delete using (tenant_id = current_setting('app.current_tenant_id')::uuid);

-- Workspaces policies
drop policy if exists select_own_workspaces on workspaces cascade;
create policy select_own_workspaces on workspaces
  for select using (id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists insert_own_workspaces on workspaces cascade;
create policy insert_own_workspaces on workspaces
  for insert with check (id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists update_own_workspaces on workspaces cascade;
create policy update_own_workspaces on workspaces
  for update using (id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists delete_own_workspaces on workspaces cascade;
create policy delete_own_workspaces on workspaces
  for delete using (id = current_setting('app.current_tenant_id')::uuid);

-- App tables policies
drop policy if exists select_own_app_tables on app_tables cascade;
create policy select_own_app_tables on app_tables
  for select using (workspace_id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists insert_own_app_tables on app_tables cascade;
create policy insert_own_app_tables on app_tables
  for insert with check (workspace_id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists update_own_app_tables on app_tables cascade;
create policy update_own_app_tables on app_tables
  for update using (workspace_id = current_setting('app.current_tenant_id')::uuid);

drop policy if exists delete_own_app_tables on app_tables cascade;
create policy delete_own_app_tables on app_tables
  for delete using (workspace_id = current_setting('app.current_tenant_id')::uuid);

-- App columns policies
drop policy if exists select_own_app_columns on app_columns cascade;
create policy select_own_app_columns on app_columns
  for select using (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid));

drop policy if exists insert_own_app_columns on app_columns cascade;
create policy insert_own_app_columns on app_columns
  for insert with check (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid));

drop policy if exists update_own_app_columns on app_columns cascade;
create policy update_own_app_columns on app_columns
  for update using (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid));

drop policy if exists delete_own_app_columns on app_columns cascade;
create policy delete_own_app_columns on app_columns
  for delete using (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid));

-- App rows policies
drop policy if exists select_own_app_rows on app_rows cascade;
create policy select_own_app_rows on app_rows
  for select using (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid));

drop policy if exists insert_own_app_rows on app_rows cascade;
create policy insert_own_app_rows on app_rows
  for insert with check (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid));

drop policy if exists update_own_app_rows on app_rows cascade;
create policy update_own_app_rows on app_rows
  for update using (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid));

drop policy if exists delete_own_app_rows on app_rows cascade;
create policy delete_own_app_rows on app_rows
  for delete using (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid));

-- Role-based policies
-- Platform Admin can access all tenants
drop policy if exists platform_admin_bypass on users cascade;
create policy platform_admin_bypass on users
  for all using (current_setting('app.current_user_role') = 'platform_admin');

-- Tenant Admin can manage their own tenant
drop policy if exists tenant_admin_manage on users cascade;
create policy tenant_admin_manage on users
  for all using (
    tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_role') = 'tenant_admin'
  );

-- Regular User can view all users in their tenant
drop policy if exists regular_user_select on users cascade;
create policy regular_user_select on users
  for select using (
    tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_role') = 'regular_user'
  );

-- Regular User can only edit their own profile
drop policy if exists regular_user_update on users cascade;
create policy regular_user_update on users
  for update using (
    id = current_setting('app.current_user_id')::uuid AND
    tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_role') = 'regular_user'
  );

-- Guest/Viewer has read-only access
drop policy if exists guest_viewer_access on users cascade;
create policy guest_viewer_access on users
  for select using (
    tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_role') = 'guest'
  );
</file>

<file path="packages/database/migrations/committed/000003.sql">
--! Previous: sha1:e043f3615502424d101c203b535ccadf24673ad2
--! Hash: sha1:83728acb8caf6aa3845908cb44ff42e3177e2f2f

-- Remove role based policies
drop policy if exists regular_user_update on users cascade;
drop policy if exists guest_viewer_access on users cascade;
drop policy if exists regular_user_select on users cascade;
drop policy if exists tenant_admin_manage on users cascade;
drop policy if exists platform_admin_bypass on users cascade;

drop table if exists login_tokens cascade;
create table login_tokens (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT NOT NULL,
  code TEXT NOT NULL,
  expires_at TIMESTAMPTZ NOT NULL,
  used BOOLEAN NOT NULL DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Remove password_hash from user table
ALTER TABLE "users" DROP COLUMN IF EXISTS "password_hash";

-- Add tenant_id foreign key to workspaces table
ALTER TABLE "workspaces" ADD COLUMN IF NOT EXISTS "tenant_id" uuid NOT NULL REFERENCES "tenants"("id");

-- Update workspaces row-level security policies to use permissions
DROP POLICY IF EXISTS select_own_workspaces ON workspaces;
CREATE POLICY select_own_workspaces ON workspaces
  FOR SELECT USING (
    (tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'view_workspace') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

DROP POLICY IF EXISTS insert_own_workspaces ON workspaces;
CREATE POLICY insert_own_workspaces ON workspaces
  FOR INSERT WITH CHECK (
    (tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'create_workspace') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

DROP POLICY IF EXISTS update_own_workspaces ON workspaces;
CREATE POLICY update_own_workspaces ON workspaces
  FOR UPDATE USING (
    (tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'edit_workspace') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

DROP POLICY IF EXISTS delete_own_workspaces ON workspaces;
CREATE POLICY delete_own_workspaces ON workspaces
  FOR DELETE USING (
    (tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'delete_workspace') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

-- App tables policies
drop policy if exists select_own_app_tables on app_tables cascade;
create policy select_own_app_tables on app_tables
  for select using (
    (workspace_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'view_app_table') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists insert_own_app_tables on app_tables cascade;
create policy insert_own_app_tables on app_tables
  for insert with check (
    (workspace_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'create_app_table') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists update_own_app_tables on app_tables cascade;
create policy update_own_app_tables on app_tables
  for update using (
    (workspace_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'edit_app_table') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists delete_own_app_tables on app_tables cascade;
create policy delete_own_app_tables on app_tables
  for delete using (
    (workspace_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'delete_app_table') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

-- App columns policies
drop policy if exists select_own_app_columns on app_columns cascade;
create policy select_own_app_columns on app_columns
  for select using (
    (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid) AND
    current_setting('app.current_user_permissions')::jsonb ? 'view_app_column') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists insert_own_app_columns on app_columns cascade;
create policy insert_own_app_columns on app_columns
  for insert with check (
    (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid) AND
    current_setting('app.current_user_permissions')::jsonb ? 'create_app_column') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

-- App rows policies
drop policy if exists select_own_app_rows on app_rows cascade;
create policy select_own_app_rows on app_rows
  for select using (
    (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid) AND
    current_setting('app.current_user_permissions')::jsonb ? 'view_app_row') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists insert_own_app_rows on app_rows cascade;
create policy insert_own_app_rows on app_rows
  for insert with check (
    (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid) AND
    current_setting('app.current_user_permissions')::jsonb ? 'create_app_row') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists update_own_app_rows on app_rows cascade;
create policy update_own_app_rows on app_rows
  for update using (
    (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid) AND
    current_setting('app.current_user_permissions')::jsonb ? 'edit_app_row') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists delete_own_app_rows on app_rows cascade;
create policy delete_own_app_rows on app_rows
  for delete using (
    (table_id IN (SELECT id FROM app_tables WHERE workspace_id = current_setting('app.current_tenant_id')::uuid) AND
    current_setting('app.current_user_permissions')::jsonb ? 'delete_app_row') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

-- Users policies
drop policy if exists select_own_users on users cascade;
create policy select_own_users on users
  for select using (
    (tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'view_user') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists insert_own_users on users cascade;
create policy insert_own_users on users
  for insert with check (
    (tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'create_user') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists update_own_users on users cascade;
create policy update_own_users on users
  for update using (
    (tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'edit_user') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists delete_own_users on users cascade;
create policy delete_own_users on users
  for delete using (
    (tenant_id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'delete_user') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

-- Tenants policies
drop policy if exists select_own_tenants on tenants cascade;
create policy select_own_tenants on tenants
  for select using (
    (id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'view_tenant') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists insert_own_tenants on tenants cascade;
create policy insert_own_tenants on tenants
  for insert with check (
    current_setting('app.current_user_permissions')::jsonb ? 'create_tenant' OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists update_own_tenants on tenants cascade;
create policy update_own_tenants on tenants
  for update using (
    (id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'edit_tenant') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists delete_own_tenants on tenants cascade;
create policy delete_own_tenants on tenants
  for delete using (
    (id = current_setting('app.current_tenant_id')::uuid AND
    current_setting('app.current_user_permissions')::jsonb ? 'delete_tenant') OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

-- Roles policies
drop policy if exists select_own_roles on roles cascade;
create policy select_own_roles on roles
  for select using (
    current_setting('app.current_user_permissions')::jsonb ? 'view_role' OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists insert_own_roles on roles cascade;
create policy insert_own_roles on roles
  for insert with check (
    current_setting('app.current_user_permissions')::jsonb ? 'create_role' OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists update_own_roles on roles cascade;
create policy update_own_roles on roles
  for update using (
    current_setting('app.current_user_permissions')::jsonb ? 'edit_role' OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );

drop policy if exists delete_own_roles on roles cascade;
create policy delete_own_roles on roles
  for delete using (
    current_setting('app.current_user_permissions')::jsonb ? 'delete_role' OR
    current_setting('app.current_user_permissions')::jsonb ? 'platform_admin'
  );
</file>

<file path="packages/database/migrations/committed/000004.sql">
--! Previous: sha1:83728acb8caf6aa3845908cb44ff42e3177e2f2f
--! Hash: sha1:4995433776ae0b4028d4aae3bbba3b4a310ce0cc

drop table if exists refresh_tokens cascade;
CREATE TABLE refresh_tokens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token TEXT NOT NULL UNIQUE,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    revoked BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    revoked_at TIMESTAMP WITH TIME ZONE,
    replaced_by_token TEXT,
    reason_revoked TEXT
);

-- Create index on user_id for faster lookups
CREATE INDEX idx_refresh_tokens_user_id ON refresh_tokens(user_id);

-- Create index on token for faster lookups
CREATE INDEX idx_refresh_tokens_token ON refresh_tokens(token);

-- Create index on replaced_by_token for faster lookups when revoking descendants
CREATE INDEX idx_refresh_tokens_replaced_by_token ON refresh_tokens(replaced_by_token);
</file>

<file path="packages/database/migrations/current.sql">
-- Enter migration here
</file>

<file path="packages/database/.envrc">
dotenv
</file>

<file path="packages/database/.gmrc">
/*
 * Graphile Migrate configuration.
 *
 * If you decide to commit this file (recommended) please ensure that it does
 * not contain any secrets (passwords, etc) - we recommend you manage these
 * with environmental variables instead.
 *
 * This file is in JSON5 format, in VSCode you can use "JSON with comments" as
 * the file format.
 */
{
  /*
   * connectionString: this tells Graphile Migrate where to find the database
   * to run the migrations against.
   *
   * RECOMMENDATION: use `DATABASE_URL` envvar instead.
   */
  // "connectionString": "postgres://appuser:apppassword@host:5432/appdb",

  /*
   * shadowConnectionString: like connectionString, but this is used for the
   * shadow database (which will be reset frequently).
   *
   * RECOMMENDATION: use `SHADOW_DATABASE_URL` envvar instead.
   */
  // "shadowConnectionString": "postgres://appuser:apppassword@host:5432/appdb_shadow",

  /*
   * rootConnectionString: like connectionString, but this is used for
   * dropping/creating the database in `graphile-migrate reset`. This isn't
   * necessary, shouldn't be used in production, but helps during development.
   *
   * RECOMMENDATION: use `ROOT_DATABASE_URL` envvar instead.
   */
  // "rootConnectionString": "postgres://adminuser:adminpassword@host:5432/postgres",

  /*
   * pgSettings: key-value settings to be automatically loaded into PostgreSQL
   * before running migrations, using an equivalent of `SET LOCAL <key> TO
   * <value>`
   */
  "pgSettings": {
    // "search_path": "app_public,app_private,app_hidden,public",
  },

  /*
   * placeholders: substituted in SQL files when compiled/executed. Placeholder
   * keys should be prefixed with a colon and in all caps, like
   * `:COLON_PREFIXED_ALL_CAPS`. Placeholder values should be strings. They
   * will be replaced verbatim with NO ESCAPING AT ALL (this differs from how
   * psql handles placeholders) so should only be used with "safe" values. This
   * is useful for committing migrations where certain parameters can change
   * between environments (development, staging, production) but you wish to
   * use the same signed migration files for all.
   *
   * The special value "!ENV" can be used to indicate an environmental variable
   * of the same name should be used.
   *
   * Graphile Migrate automatically sets the `:DATABASE_NAME` and
   * `:DATABASE_OWNER` placeholders, and you should not attempt to override
   * these.
   */
  "placeholders": {
    // ":DATABASE_VISITOR": "!ENV", // Uses process.env.DATABASE_VISITOR
  },

  /*
   * Actions allow you to run scripts or commands at certain points in the
   * migration lifecycle. SQL files are ran against the database directly.
   * "command" actions are ran with the following environmental variables set:
   *
   * - GM_DBURL: the PostgreSQL URL of the database being migrated
   * - GM_DBNAME: the name of the database from GM_DBURL
   * - GM_DBUSER: the user from GM_DBURL
   * - GM_SHADOW: set to 1 if the shadow database is being migrated, left unset
   *   otherwise
   *
   * If "shadow" is unspecified, the actions will run on events to both shadow
   * and normal databases. If "shadow" is true the action will only run on
   * actions to the shadow DB, and if false only on actions to the main DB.
   */

  /*
   * afterReset: actions executed after a `graphile-migrate reset` command.
   */
  "afterReset": [
    // "afterReset.sql",
    // { "_": "command", "command": "graphile-worker --schema-only" },
  ],
 
  /*
   * afterAllMigrations: actions executed once all migrations are complete.
   */
  "afterAllMigrations": [
    // {
    //   "_": "command",
    //   "shadow": true,
    //   "command": "if [ \"$IN_TESTS\" != \"1\" ]; then ./scripts/dump-db; fi",
    // },
  ],

  /*
   * afterCurrent: actions executed once the current migration has been
   * evaluated (i.e. in watch mode).
   */
  "afterCurrent": [
    // {
    //   "_": "command",
    //   "shadow": true,
    //   "command": "if [ \"$IN_TESTS\" = \"1\" ]; then ./scripts/test-seed; fi",
    // },
  ],

  /*
   * blankMigrationContent: content to be written to the current migration
   * after commit. NOTE: this should only contain comments.
   */
  // "blankMigrationContent": "-- Write your migration here\n",

  /****************************************************************************\
  ***                                                                        ***
  ***         You probably don't want to edit anything below here.           ***
  ***                                                                        ***
  \****************************************************************************/

  /*
   * manageGraphileMigrateSchema: if you set this false, you must be sure to
   * keep the graphile_migrate schema up to date yourself. We recommend you
   * leave it at its default.
   */
  // "manageGraphileMigrateSchema": true,

  /*
   * migrationsFolder: path to the folder in which to store your migrations.
   */
  // migrationsFolder: "./migrations",

  "//generatedWith": "1.4.1"
}
</file>

<file path="packages/database/package.json">
{
  "name": "@datanaut/database",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "watch": "graphile-migrate watch",
    "migrate": "graphile-migrate migrate",
    "commit": "graphile-migrate commit"
  },
  "dependencies": {
    "graphile-migrate": "^1.4.1"
  }
}
</file>

<file path="packages/frontend/.vite/deps/_metadata.json">
{
  "hash": "ab080957",
  "configHash": "fedcca03",
  "lockfileHash": "46054d5d",
  "browserHash": "adccf26a",
  "optimized": {},
  "chunks": {}
}
</file>

<file path="packages/frontend/.vite/deps/package.json">
{
  "type": "module"
}
</file>

<file path="packages/frontend/app/routes/dashboard/route.tsx">
import { Link, Outlet } from "@remix-run/react";
import { MetaFunction } from "@remix-run/node";
⋮----
export const meta: MetaFunction = () =>
⋮----
export default function Dashboard()
</file>

<file path="packages/frontend/app/routes/dashboard.users.$userId/route.tsx">
// CRUD manage user
</file>

<file path="packages/frontend/app/routes/dashboard.workspaces/route.tsx">
import { MetaFunction } from "@remix-run/node";
import { WorkspacesTable } from "~/features/workspaces/WorkspacesTable";
⋮----
export const meta: MetaFunction = () =>
⋮----
export default function DashboardWorkspaces()
</file>

<file path="packages/frontend/app/routes/dashboard.workspaces.$workspaceId/route.tsx">
// CRUD manage workspace
// List Tables
</file>

<file path="packages/frontend/app/routes/dashboard.workspaces.$workspaceId.tables.$tableId/route.tsx">
// CRUD manage table
// List Tables rows + table columns in same Data table
</file>

<file path="packages/frontend/app/services/api/model/createColumnRequest.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface CreateColumnRequest {
  /** @nullable */
  name?: string | null;
  /** @nullable */
  type?: string | null;
  tableId?: string;
  position?: number;
  isRequired?: boolean;
  /** @nullable */
  config?: string | null;
  /** @nullable */
  options?: string | null;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/createRowRequest.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface CreateRowRequest {
  /** @nullable */
  data?: string | null;
  tableId?: string;
}
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/createTableRequest.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface CreateTableRequest {
  /** @nullable */
  name?: string | null;
  workspaceId?: string;
}
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/createTenantRequest.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface CreateTenantRequest {
  /** @nullable */
  name?: string | null;
}
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/createUserRequest.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface CreateUserRequest {
  /** @nullable */
  email?: string | null;
  /** @nullable */
  name?: string | null;
  tenantId?: string;
  roleId?: string;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/createWorkspaceRequest.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface CreateWorkspaceRequest {
  /** @nullable */
  name?: string | null;
  tenantId?: string;
}
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/getColumnsParams.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export type GetColumnsParams = {
  tableId?: string;
};
</file>

<file path="packages/frontend/app/services/api/model/getRowsParams.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export type GetRowsParams = {
  tableId?: string;
};
</file>

<file path="packages/frontend/app/services/api/model/getTablesParams.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export type GetTablesParams = {
  workspaceId?: string;
};
</file>

<file path="packages/frontend/app/services/api/model/getWorkspacesParams.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export type GetWorkspacesParams = {
  tenantId?: string;
};
</file>

<file path="packages/frontend/app/services/api/model/loginRequest.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface LoginRequest {
  /** @nullable */
  email?: string | null;
}
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/loginResponse.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface LoginResponse {
  success?: boolean;
  /** @nullable */
  error?: string | null;
  userId?: string;
  tenantId?: string;
  roleId?: string;
}
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/refreshToken.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { User } from "./user";
⋮----
export interface RefreshToken {
  id?: string;
  userId?: string;
  /** @nullable */
  token?: string | null;
  expiresAt?: string;
  revoked?: boolean;
  createdAt?: string;
  /** @nullable */
  revokedAt?: string | null;
  /** @nullable */
  replacedByToken?: string | null;
  /** @nullable */
  reasonRevoked?: string | null;
  user?: User;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/role.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { User } from "./user";
⋮----
export interface Role {
  id?: string;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  permissions?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /** @nullable */
  users?: User[] | null;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/userResponse.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface UserResponse {
  id?: string;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  name?: string | null;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/verifyRequest.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export interface VerifyRequest {
  /** @nullable */
  email?: string | null;
  /** @nullable */
  code?: string | null;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/types/scss.d.ts">

</file>

<file path="packages/frontend/app/utilities/auth.ts">
import { redirect } from "@remix-run/node";
import { postAuthRefresh } from "~/services/api/auth/auth";
⋮----
export async function requireAuth(request: Request)
⋮----
// Try to refresh the token
⋮----
// If refresh fails, redirect to login
⋮----
// Helper to check if a route is public
export function isPublicRoute(pathname: string)
</file>

<file path="packages/frontend/app/utilities/debounce.ts">
export function debounce<T extends (...args: any[]) => void>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void
</file>

<file path="packages/frontend/app/entry.client.tsx">
/**
 * By default, Remix will handle hydrating your app on the client for you.
 * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨
 * For more information, see https://remix.run/file-conventions/entry.client
 */
⋮----
import { RemixBrowser } from "@remix-run/react";
import { startTransition, StrictMode } from "react";
import { hydrateRoot } from "react-dom/client";
</file>

<file path="packages/frontend/app/entry.server.tsx">
/**
 * By default, Remix will handle generating the HTTP Response for you.
 * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨
 * For more information, see https://remix.run/file-conventions/entry.server
 */
⋮----
import { PassThrough } from "node:stream";
⋮----
import type { AppLoadContext, EntryContext } from "@remix-run/node";
import { createReadableStreamFromReadable } from "@remix-run/node";
import { RemixServer } from "@remix-run/react";
import { isbot } from "isbot";
import { renderToPipeableStream } from "react-dom/server";
⋮----
export default function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
  // This is ignored so we can keep it in the template for visibility.  Feel
  // free to delete this parameter in your app if you're not using it!
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  loadContext: AppLoadContext
)
⋮----
// This is ignored so we can keep it in the template for visibility.  Feel
// free to delete this parameter in your app if you're not using it!
// eslint-disable-next-line @typescript-eslint/no-unused-vars
⋮----
function handleBotRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
)
⋮----
onAllReady()
onShellError(error: unknown)
onError(error: unknown)
⋮----
// Log streaming rendering errors from inside the shell.  Don't log
// errors encountered during initial shell rendering since they'll
// reject and get logged in handleDocumentRequest.
⋮----
function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
)
⋮----
onShellReady()
⋮----
// Log streaming rendering errors from inside the shell.  Don't log
// errors encountered during initial shell rendering since they'll
// reject and get logged in handleDocumentRequest.
</file>

<file path="packages/frontend/.eslintrc.cjs">
/**
 * This is intended to be a basic starting point for linting in your app.
 * It relies on recommended configs out of the box for simplicity, but you can
 * and should modify this configuration to best suit your team's needs.
 */
⋮----
/** @type {import('eslint').Linter.Config} */
⋮----
// Base config
⋮----
// React
⋮----
// Typescript
⋮----
// Node
</file>

<file path="packages/frontend/.gitignore">
# Dependencies
node_modules
**/node_modules

# Build outputs
/.cache
/build

# Environment
.env
</file>

<file path="packages/frontend/postcss.config.js">

</file>

<file path="docker-compose.yml">
version: "3.8"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: datanaut
      POSTGRES_PASSWORD: datanaut
      POSTGRES_DB: datanaut
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
</file>

<file path="LICENSE">
GNU AFFERO GENERAL PUBLIC LICENSE
                       Version 3, 19 November 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
our General Public Licenses are intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  Developers that use our General Public Licenses protect your rights
with two steps: (1) assert copyright on the software, and (2) offer
you this License which gives you legal permission to copy, distribute
and/or modify the software.

  A secondary benefit of defending all users' freedom is that
improvements made in alternate versions of the program, if they
receive widespread use, become available for other developers to
incorporate.  Many developers of free software are heartened and
encouraged by the resulting cooperation.  However, in the case of
software used on network servers, this result may fail to come about.
The GNU General Public License permits making a modified version and
letting the public access it on a server without ever releasing its
source code to the public.

  The GNU Affero General Public License is designed specifically to
ensure that, in such cases, the modified source code becomes available
to the community.  It requires the operator of a network server to
provide the source code of the modified version running there to the
users of that server.  Therefore, public use of a modified version, on
a publicly accessible server, gives the public access to the source
code of the modified version.

  An older license, called the Affero General Public License and
published by Affero, was designed to accomplish similar goals.  This is
a different license, not a version of the Affero GPL, but Affero has
released a new version of the Affero GPL which permits relicensing under
this license.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU Affero General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Remote Network Interaction; Use with the GNU General Public License.

  Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software.  This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the work with which it is combined will remain governed by version
3 of the GNU General Public License.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU Affero General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU Affero General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source.  For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code.  There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU AGPL, see
<https://www.gnu.org/licenses/>.
</file>

<file path="packages/backend/Api/Data/AppColumnRepository.cs">
public class AppColumnRepository(ApplicationDbContext context) : IRepository<AppColumn>
⋮----
private readonly ApplicationDbContext _context = context;
⋮----
public async Task<IEnumerable<AppColumn>> GetAllAsync()
⋮----
return await _context.AppColumns.ToListAsync();
⋮----
public async Task<AppColumn?> GetByIdAsync(Guid id)
⋮----
return await _context.AppColumns.FindAsync(id);
⋮----
public async Task<AppColumn> CreateAsync(AppColumn column)
⋮----
column.Id = Guid.NewGuid();
⋮----
_context.AppColumns.Add(column);
await _context.SaveChangesAsync();
⋮----
public async Task<AppColumn> UpdateAsync(AppColumn column)
⋮----
_context.AppColumns.Update(column);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var column = await _context.AppColumns.FindAsync(id);
⋮----
_context.AppColumns.Remove(column);
⋮----
public async Task<IEnumerable<AppColumn>> FindAsync(
⋮----
return await _context.AppColumns.Where(predicate).ToListAsync();
</file>

<file path="packages/backend/Api/Data/AppRowRepository.cs">
public class AppRowRepository(ApplicationDbContext context) : IRepository<AppRow>
⋮----
private readonly ApplicationDbContext _context = context;
⋮----
public async Task<IEnumerable<AppRow>> GetAllAsync()
⋮----
return await _context.AppRows.ToListAsync();
⋮----
public async Task<AppRow?> GetByIdAsync(Guid id)
⋮----
return await _context.AppRows.FindAsync(id);
⋮----
public async Task<AppRow> CreateAsync(AppRow row)
⋮----
row.Id = Guid.NewGuid();
⋮----
_context.AppRows.Add(row);
await _context.SaveChangesAsync();
⋮----
public async Task<AppRow> UpdateAsync(AppRow row)
⋮----
_context.AppRows.Update(row);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var row = await _context.AppRows.FindAsync(id);
⋮----
_context.AppRows.Remove(row);
⋮----
public async Task<IEnumerable<AppRow>> FindAsync(Expression<Func<AppRow, bool>> predicate)
⋮----
return await _context.AppRows.Where(predicate).ToListAsync();
</file>

<file path="packages/backend/Api/Data/AppTableRepository.cs">
public class AppTableRepository(ApplicationDbContext context) : IRepository<AppTable>
⋮----
private readonly ApplicationDbContext _context = context;
⋮----
public async Task<IEnumerable<AppTable>> GetAllAsync()
⋮----
return await _context.AppTables.ToListAsync();
⋮----
public async Task<AppTable?> GetByIdAsync(Guid id)
⋮----
return await _context.AppTables.FindAsync(id);
⋮----
public async Task<AppTable> CreateAsync(AppTable table)
⋮----
table.Id = Guid.NewGuid();
⋮----
_context.AppTables.Add(table);
await _context.SaveChangesAsync();
⋮----
public async Task<AppTable> UpdateAsync(AppTable table)
⋮----
_context.AppTables.Update(table);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var table = await _context.AppTables.FindAsync(id);
⋮----
_context.AppTables.Remove(table);
⋮----
public async Task<IEnumerable<AppTable>> FindAsync(
⋮----
return await _context.AppTables.Where(predicate).ToListAsync();
</file>

<file path="packages/backend/Api/Data/LoginTokenRepository.cs">
public class LoginTokenRepository : IRepository<LoginToken>
⋮----
private readonly ApplicationDbContext _context;
⋮----
public async Task<IEnumerable<LoginToken>> GetAllAsync()
⋮----
return await _context.LoginTokens.ToListAsync();
⋮----
public async Task<LoginToken?> GetByIdAsync(Guid id)
⋮----
return await _context.LoginTokens.FindAsync(id);
⋮----
public async Task<LoginToken> CreateAsync(LoginToken token)
⋮----
token.Id = Guid.NewGuid();
⋮----
_context.LoginTokens.Add(token);
await _context.SaveChangesAsync();
⋮----
public async Task<LoginToken> UpdateAsync(LoginToken token)
⋮----
_context.LoginTokens.Update(token);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var token = await _context.LoginTokens.FindAsync(id);
⋮----
_context.LoginTokens.Remove(token);
⋮----
public async Task<IEnumerable<LoginToken>> FindAsync(
⋮----
return await _context.LoginTokens.Where(predicate).ToListAsync();
</file>

<file path="packages/backend/Api/Data/RoleRepository.cs">
public class RoleRepository(ApplicationDbContext context) : IRepository<Role>
⋮----
private readonly ApplicationDbContext _context = context;
⋮----
public async Task<IEnumerable<Role>> GetAllAsync()
⋮----
return await _context.Roles.ToListAsync();
⋮----
public async Task<Role?> GetByIdAsync(Guid id)
⋮----
return await _context.Roles.FindAsync(id);
⋮----
public async Task<Role> CreateAsync(Role role)
⋮----
role.Id = Guid.NewGuid();
⋮----
_context.Roles.Add(role);
await _context.SaveChangesAsync();
⋮----
public async Task<Role> UpdateAsync(Role role)
⋮----
_context.Roles.Update(role);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var role = await _context.Roles.FindAsync(id);
⋮----
_context.Roles.Remove(role);
⋮----
public async Task<IEnumerable<Role>> FindAsync(Expression<Func<Role, bool>> predicate)
⋮----
return await _context.Roles.Where(predicate).ToListAsync();
</file>

<file path="packages/backend/Api/Data/TenantRepository.cs">
public class TenantRepository(ApplicationDbContext context) : IRepository<Tenant>
⋮----
private readonly ApplicationDbContext _context = context;
⋮----
public async Task<IEnumerable<Tenant>> GetAllAsync()
⋮----
return await _context.Tenants.ToListAsync();
⋮----
public async Task<Tenant?> GetByIdAsync(Guid id)
⋮----
return await _context.Tenants.FindAsync(id);
⋮----
public async Task<Tenant> CreateAsync(Tenant tenant)
⋮----
tenant.Id = Guid.NewGuid();
⋮----
_context.Tenants.Add(tenant);
await _context.SaveChangesAsync();
⋮----
public async Task<Tenant> UpdateAsync(Tenant tenant)
⋮----
_context.Tenants.Update(tenant);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var tenant = await _context.Tenants.FindAsync(id);
⋮----
_context.Tenants.Remove(tenant);
⋮----
public async Task<IEnumerable<Tenant>> FindAsync(Expression<Func<Tenant, bool>> predicate)
⋮----
return await _context.Tenants.Where(predicate).ToListAsync();
</file>

<file path="packages/backend/Api/Data/UserRepository.cs">
public class UserRepository(ApplicationDbContext context) : IRepository<User>
⋮----
private readonly ApplicationDbContext _context = context;
⋮----
public async Task<IEnumerable<User>> GetAllAsync()
⋮----
return await _context.Users.ToListAsync();
⋮----
public async Task<User?> GetByIdAsync(Guid id)
⋮----
return await _context.Users.FindAsync(id);
⋮----
public async Task<User> CreateAsync(User user)
⋮----
user.Id = Guid.NewGuid();
⋮----
_context.Users.Add(user);
await _context.SaveChangesAsync();
⋮----
public async Task<User> UpdateAsync(User user)
⋮----
_context.Users.Update(user);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var user = await _context.Users.FindAsync(id);
⋮----
_context.Users.Remove(user);
⋮----
public async Task<IEnumerable<User>> FindAsync(
⋮----
return await _context.Users.Where(predicate).ToListAsync();
</file>

<file path="packages/backend/Api/Data/WorkspaceRepository.cs">
public class WorkspaceRepository(ApplicationDbContext context) : IRepository<Workspace>
⋮----
private readonly ApplicationDbContext _context = context;
⋮----
public async Task<IEnumerable<Workspace>> GetAllAsync()
⋮----
return await _context.Workspaces.ToListAsync();
⋮----
public async Task<Workspace?> GetByIdAsync(Guid id)
⋮----
return await _context.Workspaces.FindAsync(id);
⋮----
public async Task<Workspace> CreateAsync(Workspace workspace)
⋮----
workspace.Id = Guid.NewGuid();
⋮----
_context.Workspaces.Add(workspace);
await _context.SaveChangesAsync();
⋮----
public async Task<Workspace> UpdateAsync(Workspace workspace)
⋮----
_context.Workspaces.Update(workspace);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
var workspace = await _context.Workspaces.FindAsync(id);
⋮----
_context.Workspaces.Remove(workspace);
⋮----
public async Task<IEnumerable<Workspace>> FindAsync(
⋮----
return await _context.Workspaces.Where(predicate).ToListAsync();
</file>

<file path="packages/backend/Api/Services/IAuthService.cs">
public interface IAuthService : IServiceMarker
⋮----
Task<LoginResponse> RequestLoginCode(string email);
Task<AuthResponse> VerifyLoginCode(string email, string code);
Task<AuthResponse> RefreshToken(string refreshToken);
</file>

<file path="packages/backend/Api/Services/TenantService.cs">
public async Task<IEnumerable<Tenant>> GetAllAsync()
⋮----
return await _tenantRepository.GetAllAsync();
⋮----
public async Task<Tenant?> GetByIdAsync(Guid id)
⋮----
var tenants = await _tenantRepository.GetAllAsync();
return tenants.FirstOrDefault(t => t.Id == id);
⋮----
public async Task<Tenant> CreateAsync(Tenant tenant)
⋮----
return await _tenantRepository.CreateAsync(tenant);
⋮----
public Task<Tenant> UpdateAsync(Tenant tenant)
⋮----
// TODO: Implement update in repository
throw new NotImplementedException();
⋮----
public Task DeleteAsync(Guid id)
⋮----
// TODO: Implement delete in repository
⋮----
public async Task<IEnumerable<Tenant>> FindAsync(Expression<Func<Tenant, bool>> predicate)
⋮----
return tenants.Where(predicate.Compile());
⋮----
public async Task<IEnumerable<Tenant>> GetTenantsAsync()
⋮----
public async Task<Tenant> CreateTenantAsync(CreateTenantRequest request)
⋮----
var tenant = new Tenant { Name = request.Name };
</file>

<file path="packages/backend/Api/Services/UserService.cs">
public async Task<IEnumerable<User>> GetAllAsync()
⋮----
return await _userRepository.GetAllAsync();
⋮----
public async Task<User?> GetByIdAsync(Guid id)
⋮----
return await _userRepository.GetByIdAsync(id);
⋮----
public async Task<User> CreateAsync(User user)
⋮----
return await _userRepository.CreateAsync(user);
⋮----
public async Task<User> UpdateAsync(User user)
⋮----
return await _userRepository.UpdateAsync(user);
⋮----
public async Task DeleteAsync(Guid id)
⋮----
await _userRepository.DeleteAsync(id);
⋮----
public async Task<IEnumerable<User>> FindAsync(Expression<Func<User, bool>> predicate)
⋮----
return await _userRepository.FindAsync(predicate);
</file>

<file path="packages/backend/Models/User.cs">
public partial class User
</file>

<file path="packages/backend/appsettings.json">
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "Jwt": {
    "SecretKey": "your-secret-key-here-must-be-at-least-16-characters",
    "Issuer": "datanaut",
    "Audience": "datanaut",
    "RefreshTokenTTL": "7"
  }
}
</file>

<file path="packages/backend/backend.http">
@backend_HostAddress = http://localhost:5104

### Users
GET {{backend_HostAddress}}/users
Accept: application/json

### Tenants
GET {{backend_HostAddress}}/tenants
Accept: application/json

### Workspaces
GET {{backend_HostAddress}}/workspaces
Accept: application/json

### Tables
GET {{backend_HostAddress}}/tables
Accept: application/json

### Columns
GET {{backend_HostAddress}}/columns
Accept: application/json

### Rows
GET {{backend_HostAddress}}/rows
Accept: application/json
</file>

<file path="packages/frontend/app/components/DataTable/DataTable.module.scss">
// Global styles
.wrapper {
}
</file>

<file path="packages/frontend/app/components/types.tsx">
export type CellType = "text" | "number" | "percentage";
⋮----
export type ColumnDef<T> = {
  accessor: keyof T;
  header: string;
  type?: CellType;
  enableGrouping?: boolean;
  aggregationFn?: string;
};
</file>

<file path="packages/frontend/app/features/tables/TablesTable.tsx">
import { useState } from "react";
import { DataTable } from "~/components/DataTable";
import { useGetApiTables } from "~/services/api/tables/tables";
⋮----
type Props = {
  workspaceId: string;
};
⋮----
export const TablesTable = (
</file>

<file path="packages/frontend/app/features/workspaces/WorkspacesTable.tsx">
import { useState } from "react";
import { DataTable } from "~/components/DataTable";
import { useGetWorkspaces } from "~/services/api/workspaces/workspaces";
⋮----
export const WorkspacesTable = () =>
</file>

<file path="packages/frontend/app/routes/dashboard.users/route.tsx">
import { LoaderFunctionArgs, MetaFunction } from "@remix-run/node";
import { dehydrate, QueryClient } from "@tanstack/react-query";
import { UsersTable } from "~/features/users/UsersTable";
import { prefetchGetUsers } from "~/services/api/users/users";
⋮----
export const meta: MetaFunction = () =>
⋮----
export async function loader(
⋮----
export default function DashboardUsers()
</file>

<file path="packages/frontend/app/routes/verify/route.tsx">
import { Form, useActionData, useNavigation } from "@remix-run/react";
import { ActionFunction, redirect } from "@remix-run/node";
import { postAuthVerify } from "~/services/api/auth/auth";
⋮----
type ActionData = {
  error?: string;
};
⋮----
export const action: ActionFunction = async (
⋮----
// Get email from URL parameters
⋮----
// After successful verification, redirect to the home page
// while preserving the authentication headers
⋮----
export default function VerifyPage()
</file>

<file path="packages/frontend/app/routes/tenants.$id.users.tsx">
import {
  Box,
  Button,
  Card,
  Flex,
  Heading,
  Table,
  Text,
} from "@radix-ui/themes";
import { Link, useLoaderData } from "@remix-run/react";
⋮----
export async function loader(
⋮----
// const users = await getUsers({ tenantId: params.id });
// return { users };
⋮----
export default function TenantUsersRoute()
⋮----
// const { users } = useLoaderData<typeof loader>();
⋮----
{/* {users.map((user) => (
              <Table.Row key={user.id}>
                <Table.Cell>
                  <Text weight="bold">{user.name}</Text>
                </Table.Cell>
                <Table.Cell>{user.email}</Table.Cell>
                <Table.Cell>
                  <Flex gap="2">
                    <Button size="1" variant="soft" asChild>
                      <Link to={`${user.id}/edit`}>Edit</Link>
                    </Button>
                  </Flex>
                </Table.Cell>
              </Table.Row>
            ))} */}
</file>

<file path="packages/frontend/app/services/api/auth/auth.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
⋮----
import type {
  AuthResponse,
  LoginRequest,
  LoginResponse,
  VerifyRequest,
} from ".././model";
⋮----
import { customFetch } from "../../../utilities/api";
⋮----
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
⋮----
export type postAuthLoginResponse200 = {
  data: LoginResponse;
  status: 200;
};
⋮----
export type postAuthLoginResponseComposite = postAuthLoginResponse200;
⋮----
export type postAuthLoginResponse = postAuthLoginResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostAuthLoginUrl = () =>
⋮----
export const postAuthLogin = async (
  loginRequest: LoginRequest,
  options?: RequestInit,
): Promise<postAuthLoginResponse> =>
⋮----
export const getPostAuthLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["postAuthLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogin>>,
    { data: LoginRequest }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogin>>,
    { data: LoginRequest }
> = (props) =>
⋮----
export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationBody = LoginRequest;
export type PostAuthLoginMutationError = unknown;
⋮----
export const usePostAuthLogin = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);
export type postAuthVerifyResponse200 = {
  data: AuthResponse;
  status: 200;
};
⋮----
export type postAuthVerifyResponseComposite = postAuthVerifyResponse200;
⋮----
export type postAuthVerifyResponse = postAuthVerifyResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostAuthVerifyUrl = () =>
⋮----
export const postAuthVerify = async (
  verifyRequest: VerifyRequest,
  options?: RequestInit,
): Promise<postAuthVerifyResponse> =>
⋮----
export const getPostAuthVerifyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthVerify>>,
    TError,
    { data: VerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthVerify>>,
  TError,
  { data: VerifyRequest },
  TContext
> => {
  const mutationKey = ["postAuthVerify"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthVerify>>,
    { data: VerifyRequest }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthVerify>>,
    { data: VerifyRequest }
> = (props) =>
⋮----
export type PostAuthVerifyMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthVerify>>
>;
export type PostAuthVerifyMutationBody = VerifyRequest;
export type PostAuthVerifyMutationError = unknown;
⋮----
export const usePostAuthVerify = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthVerify>>,
    TError,
    { data: VerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthVerify>>,
  TError,
  { data: VerifyRequest },
  TContext
> => {
  const mutationOptions = getPostAuthVerifyMutationOptions(options);
export type postAuthRefreshResponse200 = {
  data: void;
  status: 200;
};
⋮----
export type postAuthRefreshResponseComposite = postAuthRefreshResponse200;
⋮----
export type postAuthRefreshResponse = postAuthRefreshResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostAuthRefreshUrl = () =>
⋮----
export const postAuthRefresh = async (
  options?: RequestInit,
): Promise<postAuthRefreshResponse> =>
⋮----
export const getPostAuthRefreshMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthRefresh>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postAuthRefresh"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    void
> = () =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    void
> = () =>
⋮----
export type PostAuthRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRefresh>>
>;
⋮----
export type PostAuthRefreshMutationError = unknown;
⋮----
export const usePostAuthRefresh = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthRefresh>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostAuthRefreshMutationOptions(options);
export type postAuthLogoutResponse200 = {
  data: void;
  status: 200;
};
⋮----
export type postAuthLogoutResponseComposite = postAuthLogoutResponse200;
⋮----
export type postAuthLogoutResponse = postAuthLogoutResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostAuthLogoutUrl = () =>
⋮----
export const postAuthLogout = async (
  options?: RequestInit,
): Promise<postAuthLogoutResponse> =>
⋮----
export const getPostAuthLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postAuthLogout"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogout>>,
    void
> = () =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogout>>,
    void
> = () =>
⋮----
export type PostAuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogout>>
>;
⋮----
export type PostAuthLogoutMutationError = unknown;
⋮----
export const usePostAuthLogout = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogout>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostAuthLogoutMutationOptions(options);
</file>

<file path="packages/frontend/app/services/api/model/appColumn.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { AppTable } from "./appTable";
⋮----
export interface AppColumn {
  id?: string;
  tableId?: string;
  /** @nullable */
  name?: string | null;
  /** @nullable */
  type?: string | null;
  /** @nullable */
  config?: string | null;
  position?: number;
  isRequired?: boolean;
  /** @nullable */
  options?: string | null;
  createdAt?: string;
  updatedAt?: string;
  table?: AppTable;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/appRow.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { AppTable } from "./appTable";
⋮----
export interface AppRow {
  id?: string;
  tableId?: string;
  /** @nullable */
  data?: string | null;
  createdBy?: string;
  createdAt?: string;
  updatedAt?: string;
  table?: AppTable;
}
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/authResponse.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { UserResponse } from "./userResponse";
⋮----
export interface AuthResponse {
  user?: UserResponse;
  /** @nullable */
  accessToken?: string | null;
  /** @nullable */
  refreshToken?: string | null;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/getApiColumnsParams.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export type GetApiColumnsParams = {
  tableId?: string;
};
</file>

<file path="packages/frontend/app/services/api/model/getApiRowsParams.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export type GetApiRowsParams = {
  tableId?: string;
};
</file>

<file path="packages/frontend/app/services/api/model/getApiTablesParams.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export type GetApiTablesParams = {
  workspaceId?: string;
};
</file>

<file path="packages/frontend/app/services/api/model/getApiWorkspacesParams.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
⋮----
export type GetApiWorkspacesParams = {
  tenantId?: string;
};
</file>

<file path="packages/frontend/app/services/api/model/tenant.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { User } from "./user";
import type { Workspace } from "./workspace";
⋮----
export interface Tenant {
  id?: string;
  /** @nullable */
  name?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /** @nullable */
  users?: User[] | null;
  /** @nullable */
  workspaces?: Workspace[] | null;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/utilities/api.ts">
export async function getApiServer()
⋮----
export const customFetch = async <
  T extends { data: any; status: number; headers: Headers },
>(
  url: string,
  options?: RequestInit
): Promise<T> =>
</file>

<file path="packages/frontend/tsconfig.json">
{
  "include": [
    "**/*.ts",
    "**/*.tsx",
    "**/.server/**/*.ts",
    "**/.server/**/*.tsx",
    "**/.client/**/*.ts",
    "**/.client/**/*.tsx"
  ],
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ES2022", "ES2023"],
    "types": ["@remix-run/node", "vite/client"],
    "isolatedModules": true,
    "esModuleInterop": true,
    "jsx": "react-jsx",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "target": "ES2022",
    "strict": true,
    "allowJs": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "~/*": ["./app/*"]
    },

    // Vite takes care of building everything, not tsc.
    "noEmit": true
  }
}
</file>

<file path="packages/frontend/vite.config.ts">
import { vitePlugin as remix } from "@remix-run/dev";
import { defineConfig } from "vite";
import tsconfigPaths from "vite-tsconfig-paths";
⋮----
interface Future {
    v3_singleFetch: true;
  }
</file>

<file path="packages/backend/Api/Controllers/AuthController.cs">
public class AuthController(IAuthService authService) : ControllerBase
⋮----
private readonly IAuthService _authService = authService;
⋮----
public async Task<ActionResult<LoginResponse>> Login([FromBody] LoginRequest request)
⋮----
var response = await _authService.RequestLoginCode(request.Email);
⋮----
public async Task<ActionResult<AuthResponse>> Verify([FromBody] VerifyRequest request)
⋮----
var response = await _authService.VerifyLoginCode(request.Email, request.Code);
⋮----
// Set the JWT in an HTTP-only cookie
Response.Cookies.Append(
⋮----
new CookieOptions
⋮----
Expires = DateTimeOffset.UtcNow.AddHours(1),
⋮----
Expires = DateTimeOffset.UtcNow.AddDays(7),
⋮----
// Return only the user data, not the token
⋮----
public async Task<ActionResult> Refresh()
⋮----
if (string.IsNullOrEmpty(refreshToken))
⋮----
var response = await _authService.RefreshToken(refreshToken);
⋮----
// Set the new access token in an HTTP-only cookie
⋮----
public IActionResult Logout()
</file>

<file path="packages/backend/Api/Controllers/ColumnsController.cs">
public async Task<ActionResult<IEnumerable<AppColumn>>> GetColumns([FromQuery] Guid tableId)
⋮----
var columns = await _columnService.FindAsync(c => c.TableId == tableId);
⋮----
public async Task<ActionResult<AppColumn>> CreateColumn(
⋮----
string.IsNullOrEmpty(request?.Name)
|| string.IsNullOrEmpty(request?.Type)
⋮----
var column = new AppColumn
⋮----
var createdColumn = await _columnService.CreateAsync(column);
⋮----
public async Task<ActionResult<AppColumn>> GetColumn(Guid id)
⋮----
var column = await _columnService.GetByIdAsync(id);
⋮----
public async Task<ActionResult<AppColumn>> UpdateColumn(
⋮----
var updatedColumn = await _columnService.UpdateAsync(column);
⋮----
public async Task<IActionResult> DeleteColumn(Guid id)
⋮----
await _columnService.DeleteAsync(id);
</file>

<file path="packages/backend/Api/Controllers/RowsController.cs">
public async Task<ActionResult<IEnumerable<AppRow>>> GetRows([FromQuery] Guid tableId)
⋮----
var rows = await _rowService.FindAsync(r => r.TableId == tableId);
⋮----
public async Task<ActionResult<AppRow>> CreateRow([FromBody] CreateRowRequest request)
⋮----
if (string.IsNullOrEmpty(request?.Data) || request.TableId == Guid.Empty)
⋮----
var row = new AppRow { Data = request.Data, TableId = request.TableId };
⋮----
var createdRow = await _rowService.CreateAsync(row);
⋮----
public async Task<ActionResult<AppRow>> GetRow(Guid id)
⋮----
var row = await _rowService.GetByIdAsync(id);
⋮----
public async Task<ActionResult<AppRow>> UpdateRow(Guid id, [FromBody] AppRow row)
⋮----
var updatedRow = await _rowService.UpdateAsync(row);
⋮----
public async Task<IActionResult> DeleteRow(Guid id)
⋮----
await _rowService.DeleteAsync(id);
</file>

<file path="packages/backend/Api/Controllers/TablesController.cs">
public async Task<ActionResult<IEnumerable<AppTable>>> GetTables(
⋮----
var tables = await _tableService.FindAsync(t => t.WorkspaceId == workspaceId);
⋮----
public async Task<ActionResult<AppTable>> CreateTable([FromBody] CreateTableRequest request)
⋮----
if (string.IsNullOrEmpty(request?.Name) || request.WorkspaceId == Guid.Empty)
⋮----
var table = new AppTable { Name = request.Name, WorkspaceId = request.WorkspaceId };
⋮----
var createdTable = await _tableService.CreateAsync(table);
⋮----
public async Task<ActionResult<AppTable>> GetTable(Guid id)
⋮----
var table = await _tableService.GetByIdAsync(id);
⋮----
public async Task<ActionResult<AppTable>> UpdateTable(Guid id, [FromBody] AppTable table)
⋮----
var updatedTable = await _tableService.UpdateAsync(table);
⋮----
public async Task<IActionResult> DeleteTable(Guid id)
⋮----
await _tableService.DeleteAsync(id);
</file>

<file path="packages/backend/Api/Controllers/TenantsController.cs">
public class TenantsController(TenantService tenantService) : ControllerBase
⋮----
private readonly TenantService _tenantService = tenantService;
⋮----
public async Task<ActionResult<IEnumerable<Tenant>>> GetTenants()
⋮----
var tenants = await _tenantService.GetTenantsAsync();
⋮----
public async Task<ActionResult<Tenant>> CreateTenant([FromBody] CreateTenantRequest request)
⋮----
if (string.IsNullOrEmpty(request?.Name))
⋮----
var tenant = await _tenantService.CreateTenantAsync(request);
⋮----
public async Task<ActionResult<Tenant>> GetTenant(Guid id)
⋮----
var tenant = await _tenantService.GetByIdAsync(id);
⋮----
public async Task<ActionResult<Tenant>> UpdateTenant(Guid id, [FromBody] Tenant tenant)
⋮----
var updatedTenant = await _tenantService.UpdateAsync(tenant);
⋮----
public async Task<IActionResult> DeleteTenant(Guid id)
⋮----
await _tenantService.DeleteAsync(id);
</file>

<file path="packages/backend/Api/Controllers/UsersController.cs">
public async Task<ActionResult<IEnumerable<User>>> GetUsers()
⋮----
var users = await _userService.GetAllAsync();
⋮----
public async Task<ActionResult<User>> GetUser(Guid id)
⋮----
var user = await _userService.GetByIdAsync(id);
⋮----
public async Task<ActionResult<User>> CreateUser([FromBody] CreateUserRequest request)
⋮----
if (string.IsNullOrEmpty(request?.Email) || string.IsNullOrEmpty(request?.Name))
⋮----
var user = new User
⋮----
var createdUser = await _userService.CreateAsync(user);
⋮----
public async Task<ActionResult<User>> UpdateUser(Guid id, [FromBody] User user)
⋮----
var updatedUser = await _userService.UpdateAsync(user);
⋮----
public async Task<IActionResult> DeleteUser(Guid id)
⋮----
await _userService.DeleteAsync(id);
</file>

<file path="packages/backend/Api/Controllers/WorkspacesController.cs">
public async Task<ActionResult<IEnumerable<Workspace>>> GetWorkspaces(
⋮----
workspaces = await _workspaceService.FindAsync(w => w.TenantId == tenantId.Value);
⋮----
workspaces = await _workspaceService.GetAllAsync();
⋮----
public async Task<ActionResult<Workspace>> CreateWorkspace(
⋮----
if (string.IsNullOrEmpty(request?.Name) || request.TenantId == Guid.Empty)
⋮----
var workspace = new Workspace { Name = request.Name, TenantId = request.TenantId };
⋮----
var createdWorkspace = await _workspaceService.CreateAsync(workspace);
⋮----
public async Task<ActionResult<Workspace>> GetWorkspace(Guid id)
⋮----
var workspace = await _workspaceService.GetByIdAsync(id);
⋮----
public async Task<ActionResult<Workspace>> UpdateWorkspace(
⋮----
var updatedWorkspace = await _workspaceService.UpdateAsync(workspace);
⋮----
public async Task<IActionResult> DeleteWorkspace(Guid id)
⋮----
await _workspaceService.DeleteAsync(id);
</file>

<file path="packages/backend/Api/Models/AuthenticationModels.cs">
public class LoginRequest
⋮----
public class RegisterRequest
⋮----
public class UserResponse
⋮----
public class AuthResponse
⋮----
public class VerifyRequest
⋮----
public class LoginResponse
</file>

<file path="packages/backend/Api/Services/AuthService.cs">
var users = await _userService.FindAsync(u => u.Email == email);
var user = users.FirstOrDefault();
⋮----
return new LoginResponse { Success = false, Error = "User not found" };
⋮----
// Generate a 6-digit code
var code = new Random().Next(100000, 999999).ToString();
var expiresAt = DateTime.UtcNow.AddMinutes(15);
⋮----
// Create login token
var loginToken = new LoginToken
⋮----
await _loginTokenService.CreateAsync(loginToken);
⋮----
// TODO: Send email with code
Console.WriteLine($"Login code for {email}: {code}");
⋮----
return new LoginResponse
⋮----
var tokens = await _loginTokenService.FindAsync(t =>
⋮----
var loginToken = tokens.FirstOrDefault();
⋮----
return new AuthResponse { User = null };
⋮----
// Mark token as used
⋮----
await _loginTokenService.UpdateAsync(loginToken);
⋮----
// Get user
⋮----
// Generate tokens
var accessToken = await _jwtService.GenerateAccessTokenAsync(user);
var refreshToken = await _jwtService.GenerateRefreshTokenAsync(user);
await _refreshTokenService.CreateAsync(refreshToken);
⋮----
return new AuthResponse
⋮----
User = new UserResponse
⋮----
var token = await _refreshTokenService.GetByTokenAsync(refreshToken);
⋮----
var user = await _userService.GetByIdAsync(token.UserId);
⋮----
// Generate new tokens
var newAccessToken = await _jwtService.GenerateAccessTokenAsync(user);
var newRefreshToken = await _jwtService.GenerateRefreshTokenAsync(user);
⋮----
await _refreshTokenService.CreateAsync(newRefreshToken);
</file>

<file path="packages/backend/Api/Services/JwtService.cs">
public interface IJwtService
⋮----
Task<string> GenerateAccessTokenAsync(User user);
Task<RefreshToken> GenerateRefreshTokenAsync(User user);
Task<bool> ValidateTokenAsync(string token);
Task<RefreshToken?> GetRefreshTokenByTokenAsync(string token);
Task RevokeRefreshTokenAsync(RefreshToken token, string reason = null!);
⋮----
public class JwtService(IConfiguration configuration) : IJwtService
⋮----
configuration["Jwt:SecretKey"] ?? throw new ArgumentNullException("Jwt:SecretKey");
⋮----
configuration["Jwt:Issuer"] ?? throw new ArgumentNullException("Jwt:Issuer");
⋮----
configuration["Jwt:Audience"] ?? throw new ArgumentNullException("Jwt:Audience");
private readonly int _refreshTokenTTL = int.Parse(
⋮----
public Task<string> GenerateAccessTokenAsync(User user)
⋮----
var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_secretKey));
var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);
⋮----
new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),
new Claim(ClaimTypes.Email, user.Email),
new Claim("tenant_id", user.TenantId.ToString()),
new Claim("role_id", user.RoleId.ToString()),
⋮----
var token = new JwtSecurityToken(
⋮----
expires: DateTime.UtcNow.AddMinutes(15), // Short-lived access token
⋮----
return Task.FromResult(new JwtSecurityTokenHandler().WriteToken(token));
⋮----
public Task<RefreshToken> GenerateRefreshTokenAsync(User user)
⋮----
var refreshToken = new RefreshToken
⋮----
Token = Convert.ToBase64String(RandomNumberGenerator.GetBytes(64)),
ExpiresAt = DateTime.UtcNow.AddDays(_refreshTokenTTL),
⋮----
return Task.FromResult(refreshToken);
⋮----
public Task<bool> ValidateTokenAsync(string token)
⋮----
var tokenHandler = new JwtSecurityTokenHandler();
var key = Encoding.UTF8.GetBytes(_secretKey);
⋮----
var tokenValidationParameters = new TokenValidationParameters
⋮----
IssuerSigningKey = new SymmetricSecurityKey(key),
⋮----
tokenHandler.ValidateToken(token, tokenValidationParameters, out _);
return Task.FromResult(true);
⋮----
return Task.FromResult(false);
⋮----
public Task<RefreshToken?> GetRefreshTokenByTokenAsync(string token)
⋮----
// This will be implemented in the repository layer
throw new NotImplementedException();
⋮----
public Task RevokeRefreshTokenAsync(RefreshToken token, string reason = null!)
</file>

<file path="packages/backend/Models/ApplicationDbContext.cs">
public partial class ApplicationDbContext : DbContext
⋮----
protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
=> optionsBuilder.UseNpgsql("Name=DB_CONNECTION");
⋮----
protected override void OnModelCreating(ModelBuilder modelBuilder)
⋮----
modelBuilder.HasPostgresExtension("uuid-ossp");
⋮----
entity.HasKey(e => e.Id).HasName("app_columns_pkey");
⋮----
entity.ToTable("app_columns");
⋮----
entity.HasIndex(e => new { e.TableId, e.Name }, "app_columns_table_id_name_key").IsUnique();
⋮----
entity.HasIndex(e => e.TableId, "idx_app_columns_table");
⋮----
entity.Property(e => e.Id)
.HasDefaultValueSql("uuid_generate_v4()")
.HasColumnName("id");
entity.Property(e => e.Config)
.HasColumnType("jsonb")
.HasColumnName("config");
entity.Property(e => e.CreatedAt)
.HasDefaultValueSql("now()")
.HasColumnName("created_at");
entity.Property(e => e.IsRequired)
.HasDefaultValue(false)
.HasColumnName("is_required");
entity.Property(e => e.Name).HasColumnName("name");
entity.Property(e => e.Options)
⋮----
.HasColumnName("options");
entity.Property(e => e.Position).HasColumnName("position");
entity.Property(e => e.TableId).HasColumnName("table_id");
entity.Property(e => e.Type).HasColumnName("type");
entity.Property(e => e.UpdatedAt)
⋮----
.HasColumnName("updated_at");
⋮----
entity.HasOne(d => d.Table).WithMany(p => p.AppColumns)
.HasForeignKey(d => d.TableId)
.HasConstraintName("app_columns_table_id_fkey");
⋮----
entity.HasKey(e => e.Id).HasName("app_rows_pkey");
⋮----
entity.ToTable("app_rows");
⋮----
entity.HasIndex(e => e.Data, "idx_app_rows_data").HasMethod("gin");
⋮----
entity.HasIndex(e => e.TableId, "idx_app_rows_table");
⋮----
entity.Property(e => e.CreatedBy).HasColumnName("created_by");
entity.Property(e => e.Data)
.HasDefaultValueSql("'{}'::jsonb")
⋮----
.HasColumnName("data");
⋮----
entity.HasOne(d => d.Table).WithMany(p => p.AppRows)
⋮----
.HasConstraintName("app_rows_table_id_fkey");
⋮----
entity.HasKey(e => e.Id).HasName("app_tables_pkey");
⋮----
entity.ToTable("app_tables");
⋮----
entity.HasIndex(e => new { e.WorkspaceId, e.Name }, "app_tables_workspace_id_name_key").IsUnique();
⋮----
entity.HasIndex(e => e.WorkspaceId, "idx_app_tables_workspace");
⋮----
entity.Property(e => e.WorkspaceId).HasColumnName("workspace_id");
⋮----
entity.HasOne(d => d.Workspace).WithMany(p => p.AppTables)
.HasForeignKey(d => d.WorkspaceId)
.HasConstraintName("app_tables_workspace_id_fkey");
⋮----
entity.HasKey(e => e.Filename).HasName("current_pkey");
⋮----
entity.ToTable("current", "graphile_migrate");
⋮----
entity.Property(e => e.Filename)
.HasDefaultValueSql("'current.sql'::text")
.HasColumnName("filename");
entity.Property(e => e.Content).HasColumnName("content");
entity.Property(e => e.Date)
⋮----
.HasColumnName("date");
⋮----
entity.HasKey(e => e.Id).HasName("login_tokens_pkey");
⋮----
entity.ToTable("login_tokens");
⋮----
.HasDefaultValueSql("gen_random_uuid()")
⋮----
entity.Property(e => e.Code).HasColumnName("code");
⋮----
entity.Property(e => e.Email).HasColumnName("email");
entity.Property(e => e.ExpiresAt).HasColumnName("expires_at");
entity.Property(e => e.Used)
⋮----
.HasColumnName("used");
⋮----
entity.HasKey(e => e.Hash).HasName("migrations_pkey");
⋮----
entity.ToTable("migrations", "graphile_migrate");
⋮----
entity.Property(e => e.Hash).HasColumnName("hash");
⋮----
entity.Property(e => e.Filename).HasColumnName("filename");
entity.Property(e => e.PreviousHash).HasColumnName("previous_hash");
⋮----
entity.HasOne(d => d.PreviousHashNavigation).WithMany(p => p.InversePreviousHashNavigation)
.HasForeignKey(d => d.PreviousHash)
.HasConstraintName("migrations_previous_hash_fkey");
⋮----
entity.HasKey(e => e.Id).HasName("refresh_tokens_pkey");
⋮----
entity.ToTable("refresh_tokens");
⋮----
entity.HasIndex(e => e.ReplacedByToken, "idx_refresh_tokens_replaced_by_token");
⋮----
entity.HasIndex(e => e.Token, "idx_refresh_tokens_token");
⋮----
entity.HasIndex(e => e.UserId, "idx_refresh_tokens_user_id");
⋮----
entity.HasIndex(e => e.Token, "refresh_tokens_token_key").IsUnique();
⋮----
.HasDefaultValueSql("CURRENT_TIMESTAMP")
⋮----
entity.Property(e => e.ReasonRevoked).HasColumnName("reason_revoked");
entity.Property(e => e.ReplacedByToken).HasColumnName("replaced_by_token");
entity.Property(e => e.Revoked)
⋮----
.HasColumnName("revoked");
entity.Property(e => e.RevokedAt).HasColumnName("revoked_at");
entity.Property(e => e.Token).HasColumnName("token");
entity.Property(e => e.UserId).HasColumnName("user_id");
⋮----
entity.HasOne(d => d.User).WithMany(p => p.RefreshTokens)
.HasForeignKey(d => d.UserId)
.HasConstraintName("refresh_tokens_user_id_fkey");
⋮----
entity.HasKey(e => e.Id).HasName("roles_pkey");
⋮----
entity.ToTable("roles");
⋮----
entity.HasIndex(e => e.Name, "roles_name_key").IsUnique();
⋮----
entity.Property(e => e.Permissions)
⋮----
.HasColumnName("permissions");
⋮----
entity.HasKey(e => e.Id).HasName("tenants_pkey");
⋮----
entity.ToTable("tenants");
⋮----
entity.HasKey(e => e.Id).HasName("users_pkey");
⋮----
entity.ToTable("users");
⋮----
entity.HasIndex(e => e.TenantId, "idx_users_tenant_id");
⋮----
entity.HasIndex(e => e.Email, "users_email_key").IsUnique();
⋮----
entity.Property(e => e.RoleId).HasColumnName("role_id");
entity.Property(e => e.TenantId).HasColumnName("tenant_id");
⋮----
entity.HasOne(d => d.Role).WithMany(p => p.Users)
.HasForeignKey(d => d.RoleId)
.OnDelete(DeleteBehavior.ClientSetNull)
.HasConstraintName("users_role_id_fkey");
⋮----
entity.HasOne(d => d.Tenant).WithMany(p => p.Users)
.HasForeignKey(d => d.TenantId)
⋮----
.HasConstraintName("users_tenant_id_fkey");
⋮----
entity.HasKey(e => e.Id).HasName("workspaces_pkey");
⋮----
entity.ToTable("workspaces");
⋮----
entity.HasOne(d => d.Tenant).WithMany(p => p.Workspaces)
⋮----
.HasConstraintName("workspaces_tenant_id_fkey");
⋮----
partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
</file>

<file path="packages/database/README.md">
# Datanaut Database Package

This package contains the database schema, migrations, and configuration for the Datanaut project. We use PostgreSQL as our database and Graphile Migrate for managing database migrations.

## Setup

1. Make sure you have PostgreSQL running locally. The easiest way is to use Docker:

   ```bash
   docker-compose up -d postgres
   ```

2. Install dependencies:

   ```bash
   yarn install
   ```

3. The database connection is configured in `graphile-migrate.config.js` with the following default settings:
   - Host: localhost
   - Port: 5432
   - Database: datanaut
   - User: datanaut
   - Password: datanaut

## Migration Commands

We use Graphile Migrate for managing database migrations. The following commands are available:

- `yarn watch` - Starts the migration watcher that automatically applies changes
- `yarn migrate` - Runs pending migrations
- `yarn commit` - Commits the current migration

## Development Workflow

1. Start the migration watcher:

   ```bash
   yarn watch
   ```

2. Make changes to `current.sql`. The watcher will automatically apply your changes.

3. Once you're happy with your changes, commit the migration:
   ```bash
   yarn commit --message "description of your changes"
   ```

## Contributing

### Adding New Tables

1. Create your table in `current.sql` using the following template:

   ```sql
   drop table if exists your_table_name cascade;
   create table your_table_name (
     id uuid primary key default gen_random_uuid(),
     created_at timestamptz not null default now(),
     updated_at timestamptz not null default now()
   );
   ```

2. Add appropriate indexes and foreign key constraints.

3. Add row level security policies if needed.

### Modifying Existing Tables

1. Add new columns using `alter table`.
2. Never modify or remove existing columns in production to maintain backward compatibility.
3. Use database triggers for complex data validations.

### Best Practices

- Always include `created_at` and `updated_at` timestamps
- Use UUIDs for primary keys
- Add appropriate indexes for foreign keys and frequently queried columns
- Write clear migration descriptions when committing

### Testing

1. Make sure your migrations can be applied cleanly to a fresh database
2. Test both forward and rollback migrations
3. Verify data integrity after schema changes
4. Check that row level security policies work as expected

## Schema Overview

All tables include standard audit fields:

- `id`: UUID primary key
- `created_at`: Timestamp of record creation
- `updated_at`: Timestamp of last update

## Support

If you encounter any issues or have questions, please:

1. Check existing documentation
2. Review migration files in the `migrations` directory
3. Open an issue with detailed reproduction steps
</file>

<file path="packages/frontend/app/components/EditableCell.tsx">
import React from "react";
import { Row } from "@tanstack/react-table";
import { CellType } from "./types";
⋮----
type Props = {
  value: any;
  row: Row<any>;
  column: any;
  type: CellType;
  updateData: (rowIndex: number, columnId: string, value: any) => void;
  isEditing: boolean;
  onStartEdit: () => void;
  onFinishEdit: () => void;
};
⋮----
export const EditableCell = ({
  value,
  row,
  column,
  type,
  updateData,
  isEditing,
  onStartEdit,
  onFinishEdit,
}: Props) =>
⋮----
const handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>
</file>

<file path="packages/frontend/app/components/Swagger.tsx">
import { ClientOnly } from "remix-utils/client-only";
import SwaggerUI from "swagger-ui-react";
⋮----
export const Swagger = () =>
</file>

<file path="packages/frontend/app/components/TableHeader.tsx">
import { Header, flexRender } from "@tanstack/react-table";
⋮----
type Props = {
  header: Header<any, unknown>;
};
⋮----
{/* Grouping control */}
⋮----
e.stopPropagation();
header.column.toggleGrouping();
⋮----
{/* Column header with sort control */}
</file>

<file path="packages/frontend/app/components/TableRow.tsx">
import React from "react";
import { Row, Cell } from "@tanstack/react-table";
⋮----
type Props = {
  row: Row<any>;
  renderCell: (cell: Cell<any, unknown>) => React.ReactNode;
  isGrouped?: boolean;
  isExpanded?: boolean;
  toggleExpanded?: () => void;
  groupedCell?: any;
};
⋮----
// If the cell is aggregated, you can display aggregated values
⋮----
// For placeholder cells (in grouped rows)
⋮----
// Regular cell
</file>

<file path="packages/frontend/app/features/tenants/TenantsTable.tsx">
import { useState } from "react";
import { DataTable } from "~/components/DataTable";
import { useGetTenants } from "~/services/api/tenants/tenants";
⋮----
export const TenantsTable = () =>
</file>

<file path="packages/frontend/app/features/users/UsersTable.tsx">
import { useMemo, useState } from "react";
import { DataTable } from "~/components/DataTable";
import { User } from "~/services/api/model";
import { useGetUsers, usePatchUsersId } from "~/services/api/users/users";
import { debounce } from "~/utilities/debounce";
⋮----
// Raw patch function
const patchRecord = async (
    recordIndex: number,
    columnId: string,
    value: any
) =>
⋮----
// Debounced version (stable across renders)
</file>

<file path="packages/frontend/app/routes/login/route.tsx">
import { Form, useActionData, useNavigation } from "@remix-run/react";
import { ActionFunction, redirect } from "@remix-run/node";
import { postAuthLogin } from "~/services/api/auth/auth";
⋮----
type ActionData = {
  error?: string;
};
⋮----
export const action: ActionFunction = async (
⋮----
// Redirect to verify page with email as URL parameter
⋮----
export default function LoginPage()
</file>

<file path="packages/frontend/app/services/api/model/appTable.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { AppColumn } from "./appColumn";
import type { AppRow } from "./appRow";
import type { Workspace } from "./workspace";
⋮----
export interface AppTable {
  id?: string;
  /** @nullable */
  name?: string | null;
  workspaceId?: string;
  createdBy?: string;
  createdAt?: string;
  updatedAt?: string;
  /** @nullable */
  appColumns?: AppColumn[] | null;
  /** @nullable */
  appRows?: AppRow[] | null;
  workspace?: Workspace;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/model/workspace.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { AppTable } from "./appTable";
import type { Tenant } from "./tenant";
⋮----
export interface Workspace {
  id?: string;
  /** @nullable */
  name?: string | null;
  createdAt?: string;
  updatedAt?: string;
  tenantId?: string;
  /** @nullable */
  appTables?: AppTable[] | null;
  tenant?: Tenant;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/root.tsx">
import { LinksFunction, LoaderFunctionArgs } from "@remix-run/node";
import {
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "@remix-run/react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useState } from "react";
import { requireAuth, isPublicRoute } from "./utilities/auth";
⋮----
export const links: LinksFunction = ()
⋮----
export async function loader(
⋮----
// Only check auth for protected routes
⋮----
export function Layout(
⋮----
export default function MyApp()
⋮----
// With SSR, we usually want to set some default staleTime
// above 0 to avoid refetching immediately on the client
⋮----
// Don't retry on 401 errors - we'll handle those with token refresh
</file>

<file path="packages/frontend/README.md">
# Datanaut Frontend

A modern web application built with:

- React 18
- Remix 2
- Vite 6
- TypeScript
- Sass

## Development Setup

1. Install dependencies:

```sh
npm install
```

2. Start development server:

```sh
npm run dev
```

3. Open [http://localhost:5173](http://localhost:5173) in your browser

## Available Scripts

- `dev`: Starts development server with hot reload
- `build`: Creates production build
- `start`: Runs production server
- `lint`: Runs ESLint for code quality checks
- `typecheck`: Runs TypeScript compiler

## Project Structure

Key directories:

- `app/`: Remix route components and core application logic
- `public/`: Static assets
- `vite.config.ts`: Vite configuration
- `tsconfig.json`: TypeScript configuration

## Deployment

1. Create production build:

```sh
npm run build
```

2. Start production server:

```sh
npm start
```

3. Deploy the following directories:

- `build/server`
- `build/client`

## Contributing

1. Follow existing code style and patterns
2. Run linter before committing:

```sh
npm run lint
```

3. Ensure TypeScript checks pass:

```sh
npm run typecheck
```

4. Write clear commit messages

## Documentation

- [Remix Docs](https://remix.run/docs)
- [React Docs](https://react.dev)
- [Vite Docs](https://vitejs.dev)
</file>

<file path=".gitignore">
# Dependencies
node_modules
**/node_modules

# Build outputs
dist
build
.cache

# Environment
.env
.env.*
!.env.example

# IDE and Editor files
.idea/
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db
</file>

<file path="datanaut.sln">
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.5.2.0
MinimumVisualStudioVersion = 10.0.40219.1
Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "packages", "packages", "{809F86A1-1C4C-B159-0CD4-DF9D33D876CE}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "backend", "packages\backend\backend.csproj", "{633EC9D8-A892-D274-4848-B21AD326DC34}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{633EC9D8-A892-D274-4848-B21AD326DC34}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{633EC9D8-A892-D274-4848-B21AD326DC34}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{633EC9D8-A892-D274-4848-B21AD326DC34}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{633EC9D8-A892-D274-4848-B21AD326DC34}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(NestedProjects) = preSolution
		{633EC9D8-A892-D274-4848-B21AD326DC34} = {809F86A1-1C4C-B159-0CD4-DF9D33D876CE}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {0910FF1E-2A09-4D10-B718-11B34D716DB0}
	EndGlobalSection
EndGlobal
</file>

<file path="README.md">
# Datanaut Monorepo

Datanaut is a cloud-based platform that combines the functionality of a spreadsheet with a database, allowing users to:
- Organize data in a visually intuitive interface
- Collaborate in real-time with team members
- Customize data views and workflows

Built with a modern monorepo architecture containing:
- Frontend (React/Remix/Vite)
- Database services

## Project Structure

Key packages:
- `packages/frontend`: Web application built with React, Remix, and Vite
- `packages/database`: Database services and migrations
</file>

<file path="packages/backend/Api/Configuration/WebApplicationBuilderExtensions.cs">
public static class WebApplicationBuilderExtensions
⋮----
public static WebApplicationBuilder ConfigureServices(this WebApplicationBuilder builder)
⋮----
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
⋮----
public static WebApplicationBuilder ConfigureAuthentication(
⋮----
var jwtSecretKey = Environment.GetEnvironmentVariable("JWT_SECRET_KEY");
if (string.IsNullOrEmpty(jwtSecretKey))
⋮----
throw new InvalidOperationException(
⋮----
.Services.AddAuthentication(options =>
⋮----
.AddJwtBearer(options =>
⋮----
options.TokenValidationParameters = new TokenValidationParameters
⋮----
IssuerSigningKey = new SymmetricSecurityKey(
Encoding.UTF8.GetBytes(jwtSecretKey)
⋮----
options.Events = new JwtBearerEvents
⋮----
context.Request.Cookies.TryGetValue(
⋮----
public static WebApplicationBuilder ConfigureDatabase(this WebApplicationBuilder builder)
⋮----
var connectionString = Environment.GetEnvironmentVariable("DB_CONNECTION");
if (string.IsNullOrEmpty(connectionString))
⋮----
options.UseNpgsql(connectionString)
⋮----
public static WebApplicationBuilder ConfigureDependencyInjection(
⋮----
builder.Services.Scan(scan =>
scan.FromAssemblies(Assembly.GetExecutingAssembly())
.AddClasses()
.AsImplementedInterfaces()
.WithScopedLifetime()
</file>

<file path="packages/frontend/app/components/DataTable/index.tsx">
import { useState } from "react";
import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
  getSortedRowModel,
  getPaginationRowModel,
  SortingState,
  getGroupedRowModel,
  getExpandedRowModel,
  ExpandedState,
  GroupingState,
} from "@tanstack/react-table";
import { EditableCell } from "../EditableCell";
import { TableHeader } from "../TableHeader";
import { TableRow } from "../TableRow";
import { Pagination } from "../Pagination";
import { ColumnDef } from "../types";
import styles from "./DataTable.module.scss";
⋮----
interface DataTableProps<T> {
  data: T[];
  setData: (data: T[]) => void;
  patchRecord?: (recordIndex: number, columnId: string, value: any) => void;
  columns: ColumnDef<T>[];
  defaultGrouping?: string[];
}
⋮----
// Function to update data when cell value changes
const updateData = (rowIndex: number, columnId: string, value: any) =>
⋮----
onFinishEdit=
⋮----
flexRender(cell.column.columnDef.cell, cell.getContext())
⋮----
toggleExpanded=
</file>

<file path="packages/frontend/app/components/Pagination.tsx">
type Props = {
  table: any;
};
⋮----
// disabled={!table.getCanPreviousPage()}
⋮----
// disabled={!table.getCanPreviousPage()}
⋮----
// disabled={!table.getCanNextPage()}
⋮----
// disabled={!table.getCanNextPage()}
</file>

<file path="packages/frontend/app/services/api/model/user.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import type { RefreshToken } from "./refreshToken";
import type { Role } from "./role";
import type { Tenant } from "./tenant";
⋮----
export interface User {
  id?: string;
  tenantId?: string;
  roleId?: string;
  /** @nullable */
  email?: string | null;
  /** @nullable */
  name?: string | null;
  createdAt?: string;
  updatedAt?: string;
  /** @nullable */
  refreshTokens?: RefreshToken[] | null;
  role?: Role;
  tenant?: Tenant;
}
⋮----
/** @nullable */
⋮----
/** @nullable */
⋮----
/** @nullable */
</file>

<file path="packages/frontend/app/services/api/tenants/tenants.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
⋮----
import type { CreateTenantRequest, Tenant } from ".././model";
⋮----
import { customFetch } from "../../../utilities/api";
⋮----
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
⋮----
export type getTenantsResponse200 = {
  data: Tenant[];
  status: 200;
};
⋮----
export type getTenantsResponseComposite = getTenantsResponse200;
⋮----
export type getTenantsResponse = getTenantsResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetTenantsUrl = () =>
⋮----
export const getTenants = async (
  options?: RequestInit,
): Promise<getTenantsResponse> =>
⋮----
export const getGetTenantsQueryKey = () =>
⋮----
export const getGetTenantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getTenants>>> = ({
    signal,
}) => getTenants(
⋮----
export type GetTenantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTenants>>
>;
export type GetTenantsQueryError = unknown;
⋮----
export function useGetTenants<
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getTenants>>,
        TError,
        Awaited<ReturnType<typeof getTenants>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> &
export function useGetTenants<
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getTenants>>,
        TError,
        Awaited<ReturnType<typeof getTenants>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> &
export function useGetTenants<
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetTenants = async <
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type postTenantsResponse200 = {
  data: Tenant;
  status: 200;
};
⋮----
export type postTenantsResponseComposite = postTenantsResponse200;
⋮----
export type postTenantsResponse = postTenantsResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostTenantsUrl = () =>
⋮----
export const postTenants = async (
  createTenantRequest: CreateTenantRequest,
  options?: RequestInit,
): Promise<postTenantsResponse> =>
⋮----
export const getPostTenantsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTenants>>,
    TError,
    { data: CreateTenantRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTenants>>,
  TError,
  { data: CreateTenantRequest },
  TContext
> => {
  const mutationKey = ["postTenants"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTenants>>,
    { data: CreateTenantRequest }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTenants>>,
    { data: CreateTenantRequest }
> = (props) =>
⋮----
export type PostTenantsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTenants>>
>;
export type PostTenantsMutationBody = CreateTenantRequest;
export type PostTenantsMutationError = unknown;
⋮----
export const usePostTenants = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTenants>>,
    TError,
    { data: CreateTenantRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postTenants>>,
  TError,
  { data: CreateTenantRequest },
  TContext
> => {
  const mutationOptions = getPostTenantsMutationOptions(options);
export type getTenantsIdResponse200 = {
  data: Tenant;
  status: 200;
};
⋮----
export type getTenantsIdResponseComposite = getTenantsIdResponse200;
⋮----
export type getTenantsIdResponse = getTenantsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetTenantsIdUrl = (id: string) =>
⋮----
export const getTenantsId = async (
  id: string,
  options?: RequestInit,
): Promise<getTenantsIdResponse> =>
⋮----
export const getGetTenantsIdQueryKey = (id: string) =>
⋮----
export const getGetTenantsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getTenantsId>>> = ({
    signal,
}) => getTenantsId(id,
⋮----
export type GetTenantsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTenantsId>>
>;
export type GetTenantsIdQueryError = unknown;
⋮----
export function useGetTenantsId<
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantsId>>,
          TError,
          Awaited<ReturnType<typeof getTenantsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetTenantsId<
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantsId>>,
          TError,
          Awaited<ReturnType<typeof getTenantsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetTenantsId<
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetTenantsId = async <
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type patchTenantsIdResponse200 = {
  data: Tenant;
  status: 200;
};
⋮----
export type patchTenantsIdResponseComposite = patchTenantsIdResponse200;
⋮----
export type patchTenantsIdResponse = patchTenantsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getPatchTenantsIdUrl = (id: string) =>
⋮----
export const patchTenantsId = async (
  id: string,
  tenant: Tenant,
  options?: RequestInit,
): Promise<patchTenantsIdResponse> =>
⋮----
export const getPatchTenantsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTenantsId>>,
    TError,
    { id: string; data: Tenant },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchTenantsId>>,
  TError,
  { id: string; data: Tenant },
  TContext
> => {
  const mutationKey = ["patchTenantsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchTenantsId>>,
    { id: string; data: Tenant }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchTenantsId>>,
    { id: string; data: Tenant }
> = (props) =>
⋮----
export type PatchTenantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchTenantsId>>
>;
export type PatchTenantsIdMutationBody = Tenant;
export type PatchTenantsIdMutationError = unknown;
⋮----
export const usePatchTenantsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTenantsId>>,
    TError,
    { id: string; data: Tenant },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchTenantsId>>,
  TError,
  { id: string; data: Tenant },
  TContext
> => {
  const mutationOptions = getPatchTenantsIdMutationOptions(options);
export type deleteTenantsIdResponse200 = {
  data: void;
  status: 200;
};
⋮----
export type deleteTenantsIdResponseComposite = deleteTenantsIdResponse200;
⋮----
export type deleteTenantsIdResponse = deleteTenantsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getDeleteTenantsIdUrl = (id: string) =>
⋮----
export const deleteTenantsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteTenantsIdResponse> =>
⋮----
export const getDeleteTenantsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTenantsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTenantsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTenantsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTenantsId>>,
    { id: string }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTenantsId>>,
    { id: string }
> = (props) =>
⋮----
export type DeleteTenantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTenantsId>>
>;
⋮----
export type DeleteTenantsIdMutationError = unknown;
⋮----
export const useDeleteTenantsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTenantsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTenantsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTenantsIdMutationOptions(options);
</file>

<file path="packages/frontend/app/services/api/users/users.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
⋮----
import type { CreateUserRequest, User } from ".././model";
⋮----
import { customFetch } from "../../../utilities/api";
⋮----
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
⋮----
export type getUsersResponse200 = {
  data: User[];
  status: 200;
};
⋮----
export type getUsersResponseComposite = getUsersResponse200;
⋮----
export type getUsersResponse = getUsersResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetUsersUrl = () =>
⋮----
export const getUsers = async (
  options?: RequestInit,
): Promise<getUsersResponse> =>
⋮----
export const getGetUsersQueryKey = () =>
⋮----
export const getGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({
    signal,
}) => getUsers(
⋮----
export type GetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersQueryError = unknown;
⋮----
export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsers>>,
        TError,
        Awaited<ReturnType<typeof getUsers>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> &
export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsers>>,
        TError,
        Awaited<ReturnType<typeof getUsers>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> &
export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetUsers = async <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type postUsersResponse200 = {
  data: User;
  status: 200;
};
⋮----
export type postUsersResponseComposite = postUsersResponse200;
⋮----
export type postUsersResponse = postUsersResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostUsersUrl = () =>
⋮----
export const postUsers = async (
  createUserRequest: CreateUserRequest,
  options?: RequestInit,
): Promise<postUsersResponse> =>
⋮----
export const getPostUsersMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: CreateUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: CreateUserRequest },
  TContext
> => {
  const mutationKey = ["postUsers"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsers>>,
    { data: CreateUserRequest }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsers>>,
    { data: CreateUserRequest }
> = (props) =>
⋮----
export type PostUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsers>>
>;
export type PostUsersMutationBody = CreateUserRequest;
export type PostUsersMutationError = unknown;
⋮----
export const usePostUsers = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: CreateUserRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: CreateUserRequest },
  TContext
> => {
  const mutationOptions = getPostUsersMutationOptions(options);
export type getUsersIdResponse200 = {
  data: User;
  status: 200;
};
⋮----
export type getUsersIdResponseComposite = getUsersIdResponse200;
⋮----
export type getUsersIdResponse = getUsersIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetUsersIdUrl = (id: string) =>
⋮----
export const getUsersId = async (
  id: string,
  options?: RequestInit,
): Promise<getUsersIdResponse> =>
⋮----
export const getGetUsersIdQueryKey = (id: string) =>
⋮----
export const getGetUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersId>>> = ({
    signal,
}) => getUsersId(id,
⋮----
export type GetUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersId>>
>;
export type GetUsersIdQueryError = unknown;
⋮----
export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersId>>,
          TError,
          Awaited<ReturnType<typeof getUsersId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersId>>,
          TError,
          Awaited<ReturnType<typeof getUsersId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetUsersId = async <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type patchUsersIdResponse200 = {
  data: User;
  status: 200;
};
⋮----
export type patchUsersIdResponseComposite = patchUsersIdResponse200;
⋮----
export type patchUsersIdResponse = patchUsersIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getPatchUsersIdUrl = (id: string) =>
⋮----
export const patchUsersId = async (
  id: string,
  user: User,
  options?: RequestInit,
): Promise<patchUsersIdResponse> =>
⋮----
export const getPatchUsersIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsersId>>,
    TError,
    { id: string; data: User },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchUsersId>>,
  TError,
  { id: string; data: User },
  TContext
> => {
  const mutationKey = ["patchUsersId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchUsersId>>,
    { id: string; data: User }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchUsersId>>,
    { id: string; data: User }
> = (props) =>
⋮----
export type PatchUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchUsersId>>
>;
export type PatchUsersIdMutationBody = User;
export type PatchUsersIdMutationError = unknown;
⋮----
export const usePatchUsersId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchUsersId>>,
    TError,
    { id: string; data: User },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchUsersId>>,
  TError,
  { id: string; data: User },
  TContext
> => {
  const mutationOptions = getPatchUsersIdMutationOptions(options);
export type deleteUsersIdResponse200 = {
  data: void;
  status: 200;
};
⋮----
export type deleteUsersIdResponseComposite = deleteUsersIdResponse200;
⋮----
export type deleteUsersIdResponse = deleteUsersIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getDeleteUsersIdUrl = (id: string) =>
⋮----
export const deleteUsersId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteUsersIdResponse> =>
⋮----
export const getDeleteUsersIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUsersId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteUsersId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUsersId>>,
    { id: string }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUsersId>>,
    { id: string }
> = (props) =>
⋮----
export type DeleteUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUsersId>>
>;
⋮----
export type DeleteUsersIdMutationError = unknown;
⋮----
export const useDeleteUsersId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteUsersId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteUsersIdMutationOptions(options);
</file>

<file path="packages/frontend/app/services/api/workspaces/workspaces.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
⋮----
import type {
  CreateWorkspaceRequest,
  GetWorkspacesParams,
  Workspace,
} from ".././model";
⋮----
import { customFetch } from "../../../utilities/api";
⋮----
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
⋮----
export type getWorkspacesResponse200 = {
  data: Workspace[];
  status: 200;
};
⋮----
export type getWorkspacesResponseComposite = getWorkspacesResponse200;
⋮----
export type getWorkspacesResponse = getWorkspacesResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetWorkspacesUrl = (params?: GetWorkspacesParams) =>
⋮----
export const getWorkspaces = async (
  params?: GetWorkspacesParams,
  options?: RequestInit,
): Promise<getWorkspacesResponse> =>
⋮----
export const getGetWorkspacesQueryKey = (params?: GetWorkspacesParams) =>
⋮----
export const getGetWorkspacesQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkspaces>>> = ({
    signal,
}) => getWorkspaces(params,
⋮----
export type GetWorkspacesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorkspaces>>
>;
export type GetWorkspacesQueryError = unknown;
⋮----
export function useGetWorkspaces<
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params: undefined | GetWorkspacesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof getWorkspaces>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetWorkspaces<
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof getWorkspaces>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetWorkspaces<
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetWorkspaces = async <
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type postWorkspacesResponse200 = {
  data: Workspace;
  status: 200;
};
⋮----
export type postWorkspacesResponseComposite = postWorkspacesResponse200;
⋮----
export type postWorkspacesResponse = postWorkspacesResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostWorkspacesUrl = () =>
⋮----
export const postWorkspaces = async (
  createWorkspaceRequest: CreateWorkspaceRequest,
  options?: RequestInit,
): Promise<postWorkspacesResponse> =>
⋮----
export const getPostWorkspacesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorkspaces>>,
    TError,
    { data: CreateWorkspaceRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWorkspaces>>,
  TError,
  { data: CreateWorkspaceRequest },
  TContext
> => {
  const mutationKey = ["postWorkspaces"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWorkspaces>>,
    { data: CreateWorkspaceRequest }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWorkspaces>>,
    { data: CreateWorkspaceRequest }
> = (props) =>
⋮----
export type PostWorkspacesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWorkspaces>>
>;
export type PostWorkspacesMutationBody = CreateWorkspaceRequest;
export type PostWorkspacesMutationError = unknown;
⋮----
export const usePostWorkspaces = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorkspaces>>,
    TError,
    { data: CreateWorkspaceRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postWorkspaces>>,
  TError,
  { data: CreateWorkspaceRequest },
  TContext
> => {
  const mutationOptions = getPostWorkspacesMutationOptions(options);
export type getWorkspacesIdResponse200 = {
  data: Workspace;
  status: 200;
};
⋮----
export type getWorkspacesIdResponseComposite = getWorkspacesIdResponse200;
⋮----
export type getWorkspacesIdResponse = getWorkspacesIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetWorkspacesIdUrl = (id: string) =>
⋮----
export const getWorkspacesId = async (
  id: string,
  options?: RequestInit,
): Promise<getWorkspacesIdResponse> =>
⋮----
export const getGetWorkspacesIdQueryKey = (id: string) =>
⋮----
export const getGetWorkspacesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkspacesId>>> = ({
    signal,
}) => getWorkspacesId(id,
⋮----
export type GetWorkspacesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorkspacesId>>
>;
export type GetWorkspacesIdQueryError = unknown;
⋮----
export function useGetWorkspacesId<
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspacesId>>,
          TError,
          Awaited<ReturnType<typeof getWorkspacesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetWorkspacesId<
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspacesId>>,
          TError,
          Awaited<ReturnType<typeof getWorkspacesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetWorkspacesId<
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetWorkspacesId = async <
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type patchWorkspacesIdResponse200 = {
  data: Workspace;
  status: 200;
};
⋮----
export type patchWorkspacesIdResponseComposite = patchWorkspacesIdResponse200;
⋮----
export type patchWorkspacesIdResponse = patchWorkspacesIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getPatchWorkspacesIdUrl = (id: string) =>
⋮----
export const patchWorkspacesId = async (
  id: string,
  workspace: Workspace,
  options?: RequestInit,
): Promise<patchWorkspacesIdResponse> =>
⋮----
export const getPatchWorkspacesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchWorkspacesId>>,
    TError,
    { id: string; data: Workspace },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchWorkspacesId>>,
  TError,
  { id: string; data: Workspace },
  TContext
> => {
  const mutationKey = ["patchWorkspacesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchWorkspacesId>>,
    { id: string; data: Workspace }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchWorkspacesId>>,
    { id: string; data: Workspace }
> = (props) =>
⋮----
export type PatchWorkspacesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchWorkspacesId>>
>;
export type PatchWorkspacesIdMutationBody = Workspace;
export type PatchWorkspacesIdMutationError = unknown;
⋮----
export const usePatchWorkspacesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchWorkspacesId>>,
    TError,
    { id: string; data: Workspace },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchWorkspacesId>>,
  TError,
  { id: string; data: Workspace },
  TContext
> => {
  const mutationOptions = getPatchWorkspacesIdMutationOptions(options);
export type deleteWorkspacesIdResponse200 = {
  data: void;
  status: 200;
};
⋮----
export type deleteWorkspacesIdResponseComposite = deleteWorkspacesIdResponse200;
⋮----
export type deleteWorkspacesIdResponse = deleteWorkspacesIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getDeleteWorkspacesIdUrl = (id: string) =>
⋮----
export const deleteWorkspacesId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteWorkspacesIdResponse> =>
⋮----
export const getDeleteWorkspacesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorkspacesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWorkspacesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteWorkspacesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWorkspacesId>>,
    { id: string }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWorkspacesId>>,
    { id: string }
> = (props) =>
⋮----
export type DeleteWorkspacesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWorkspacesId>>
>;
⋮----
export type DeleteWorkspacesIdMutationError = unknown;
⋮----
export const useDeleteWorkspacesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorkspacesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteWorkspacesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteWorkspacesIdMutationOptions(options);
</file>

<file path="packages/frontend/orval.config.ts">
import { defineConfig } from "orval";
</file>

<file path="packages/frontend/app/routes/_index.tsx">
import { useState } from "react";
import type { MetaFunction } from "@remix-run/node";
import { DataTable } from "~/components/DataTable";
⋮----
type Person = {
  firstName: string;
  lastName: string;
  age: number;
  visits: number;
  status: string;
  progress: number;
};
⋮----
export const meta: MetaFunction = () =>
⋮----
export default function Index()
⋮----
// useEffect(() => {
//   getApiUsers().then((users) => {
//     console.log("users", users);
//   });
// }, []);
</file>

<file path="packages/frontend/app/routes/tenants.tsx">
import { LoaderFunctionArgs } from "@remix-run/node";
import { useLoaderData } from "@remix-run/react";
import {
  dehydrate,
  HydrationBoundary,
  QueryClient,
} from "@tanstack/react-query";
import { TenantsTable } from "~/features/tenants/TenantsTable";
import { prefetchGetTenants } from "~/services/api/tenants/tenants";
⋮----
export async function loader(
⋮----
export default function TenantsRoute()
</file>

<file path="packages/frontend/app/services/api/columns/columns.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
⋮----
import type {
  AppColumn,
  CreateColumnRequest,
  GetColumnsParams,
} from ".././model";
⋮----
import { customFetch } from "../../../utilities/api";
⋮----
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
⋮----
export type getColumnsResponse200 = {
  data: AppColumn[];
  status: 200;
};
⋮----
export type getColumnsResponseComposite = getColumnsResponse200;
⋮----
export type getColumnsResponse = getColumnsResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetColumnsUrl = (params?: GetColumnsParams) =>
⋮----
export const getColumns = async (
  params?: GetColumnsParams,
  options?: RequestInit,
): Promise<getColumnsResponse> =>
⋮----
export const getGetColumnsQueryKey = (params?: GetColumnsParams) =>
⋮----
export const getGetColumnsQueryOptions = <
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getColumns>>> = ({
    signal,
}) => getColumns(params,
⋮----
export type GetColumnsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getColumns>>
>;
export type GetColumnsQueryError = unknown;
⋮----
export function useGetColumns<
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params: undefined | GetColumnsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getColumns>>,
          TError,
          Awaited<ReturnType<typeof getColumns>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetColumns<
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getColumns>>,
          TError,
          Awaited<ReturnType<typeof getColumns>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetColumns<
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetColumns = async <
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type postColumnsResponse200 = {
  data: AppColumn;
  status: 200;
};
⋮----
export type postColumnsResponseComposite = postColumnsResponse200;
⋮----
export type postColumnsResponse = postColumnsResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostColumnsUrl = () =>
⋮----
export const postColumns = async (
  createColumnRequest: CreateColumnRequest,
  options?: RequestInit,
): Promise<postColumnsResponse> =>
⋮----
export const getPostColumnsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postColumns>>,
    TError,
    { data: CreateColumnRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postColumns>>,
  TError,
  { data: CreateColumnRequest },
  TContext
> => {
  const mutationKey = ["postColumns"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postColumns>>,
    { data: CreateColumnRequest }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postColumns>>,
    { data: CreateColumnRequest }
> = (props) =>
⋮----
export type PostColumnsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postColumns>>
>;
export type PostColumnsMutationBody = CreateColumnRequest;
export type PostColumnsMutationError = unknown;
⋮----
export const usePostColumns = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postColumns>>,
    TError,
    { data: CreateColumnRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postColumns>>,
  TError,
  { data: CreateColumnRequest },
  TContext
> => {
  const mutationOptions = getPostColumnsMutationOptions(options);
export type getColumnsIdResponse200 = {
  data: AppColumn;
  status: 200;
};
⋮----
export type getColumnsIdResponseComposite = getColumnsIdResponse200;
⋮----
export type getColumnsIdResponse = getColumnsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetColumnsIdUrl = (id: string) =>
⋮----
export const getColumnsId = async (
  id: string,
  options?: RequestInit,
): Promise<getColumnsIdResponse> =>
⋮----
export const getGetColumnsIdQueryKey = (id: string) =>
⋮----
export const getGetColumnsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getColumnsId>>> = ({
    signal,
}) => getColumnsId(id,
⋮----
export type GetColumnsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getColumnsId>>
>;
export type GetColumnsIdQueryError = unknown;
⋮----
export function useGetColumnsId<
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getColumnsId>>,
          TError,
          Awaited<ReturnType<typeof getColumnsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetColumnsId<
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getColumnsId>>,
          TError,
          Awaited<ReturnType<typeof getColumnsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetColumnsId<
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetColumnsId = async <
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type patchColumnsIdResponse200 = {
  data: AppColumn;
  status: 200;
};
⋮----
export type patchColumnsIdResponseComposite = patchColumnsIdResponse200;
⋮----
export type patchColumnsIdResponse = patchColumnsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getPatchColumnsIdUrl = (id: string) =>
⋮----
export const patchColumnsId = async (
  id: string,
  appColumn: AppColumn,
  options?: RequestInit,
): Promise<patchColumnsIdResponse> =>
⋮----
export const getPatchColumnsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchColumnsId>>,
    TError,
    { id: string; data: AppColumn },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchColumnsId>>,
  TError,
  { id: string; data: AppColumn },
  TContext
> => {
  const mutationKey = ["patchColumnsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchColumnsId>>,
    { id: string; data: AppColumn }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchColumnsId>>,
    { id: string; data: AppColumn }
> = (props) =>
⋮----
export type PatchColumnsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchColumnsId>>
>;
export type PatchColumnsIdMutationBody = AppColumn;
export type PatchColumnsIdMutationError = unknown;
⋮----
export const usePatchColumnsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchColumnsId>>,
    TError,
    { id: string; data: AppColumn },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchColumnsId>>,
  TError,
  { id: string; data: AppColumn },
  TContext
> => {
  const mutationOptions = getPatchColumnsIdMutationOptions(options);
export type deleteColumnsIdResponse200 = {
  data: void;
  status: 200;
};
⋮----
export type deleteColumnsIdResponseComposite = deleteColumnsIdResponse200;
⋮----
export type deleteColumnsIdResponse = deleteColumnsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getDeleteColumnsIdUrl = (id: string) =>
⋮----
export const deleteColumnsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteColumnsIdResponse> =>
⋮----
export const getDeleteColumnsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteColumnsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteColumnsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteColumnsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteColumnsId>>,
    { id: string }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteColumnsId>>,
    { id: string }
> = (props) =>
⋮----
export type DeleteColumnsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteColumnsId>>
>;
⋮----
export type DeleteColumnsIdMutationError = unknown;
⋮----
export const useDeleteColumnsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteColumnsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteColumnsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteColumnsIdMutationOptions(options);
</file>

<file path="packages/frontend/app/services/api/model/index.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
</file>

<file path="packages/frontend/app/services/api/rows/rows.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
⋮----
import type { AppRow, CreateRowRequest, GetRowsParams } from ".././model";
⋮----
import { customFetch } from "../../../utilities/api";
⋮----
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
⋮----
export type getRowsResponse200 = {
  data: AppRow[];
  status: 200;
};
⋮----
export type getRowsResponseComposite = getRowsResponse200;
⋮----
export type getRowsResponse = getRowsResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetRowsUrl = (params?: GetRowsParams) =>
⋮----
export const getRows = async (
  params?: GetRowsParams,
  options?: RequestInit,
): Promise<getRowsResponse> =>
⋮----
export const getGetRowsQueryKey = (params?: GetRowsParams) =>
⋮----
export const getGetRowsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getRows>>> = ({
    signal,
}) => getRows(params,
⋮----
export type GetRowsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRows>>
>;
export type GetRowsQueryError = unknown;
⋮----
export function useGetRows<
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params: undefined | GetRowsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRows>>,
          TError,
          Awaited<ReturnType<typeof getRows>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetRows<
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRows>>,
          TError,
          Awaited<ReturnType<typeof getRows>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetRows<
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetRows = async <
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type postRowsResponse200 = {
  data: AppRow;
  status: 200;
};
⋮----
export type postRowsResponseComposite = postRowsResponse200;
⋮----
export type postRowsResponse = postRowsResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostRowsUrl = () =>
⋮----
export const postRows = async (
  createRowRequest: CreateRowRequest,
  options?: RequestInit,
): Promise<postRowsResponse> =>
⋮----
export const getPostRowsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRows>>,
    TError,
    { data: CreateRowRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRows>>,
  TError,
  { data: CreateRowRequest },
  TContext
> => {
  const mutationKey = ["postRows"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRows>>,
    { data: CreateRowRequest }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRows>>,
    { data: CreateRowRequest }
> = (props) =>
⋮----
export type PostRowsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRows>>
>;
export type PostRowsMutationBody = CreateRowRequest;
export type PostRowsMutationError = unknown;
⋮----
export const usePostRows = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRows>>,
    TError,
    { data: CreateRowRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postRows>>,
  TError,
  { data: CreateRowRequest },
  TContext
> => {
  const mutationOptions = getPostRowsMutationOptions(options);
export type getRowsIdResponse200 = {
  data: AppRow;
  status: 200;
};
⋮----
export type getRowsIdResponseComposite = getRowsIdResponse200;
⋮----
export type getRowsIdResponse = getRowsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetRowsIdUrl = (id: string) =>
⋮----
export const getRowsId = async (
  id: string,
  options?: RequestInit,
): Promise<getRowsIdResponse> =>
⋮----
export const getGetRowsIdQueryKey = (id: string) =>
⋮----
export const getGetRowsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getRowsId>>> = ({
    signal,
}) => getRowsId(id,
⋮----
export type GetRowsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRowsId>>
>;
export type GetRowsIdQueryError = unknown;
⋮----
export function useGetRowsId<
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRowsId>>,
          TError,
          Awaited<ReturnType<typeof getRowsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetRowsId<
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRowsId>>,
          TError,
          Awaited<ReturnType<typeof getRowsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetRowsId<
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetRowsId = async <
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type patchRowsIdResponse200 = {
  data: AppRow;
  status: 200;
};
⋮----
export type patchRowsIdResponseComposite = patchRowsIdResponse200;
⋮----
export type patchRowsIdResponse = patchRowsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getPatchRowsIdUrl = (id: string) =>
⋮----
export const patchRowsId = async (
  id: string,
  appRow: AppRow,
  options?: RequestInit,
): Promise<patchRowsIdResponse> =>
⋮----
export const getPatchRowsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRowsId>>,
    TError,
    { id: string; data: AppRow },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRowsId>>,
  TError,
  { id: string; data: AppRow },
  TContext
> => {
  const mutationKey = ["patchRowsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRowsId>>,
    { id: string; data: AppRow }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRowsId>>,
    { id: string; data: AppRow }
> = (props) =>
⋮----
export type PatchRowsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRowsId>>
>;
export type PatchRowsIdMutationBody = AppRow;
export type PatchRowsIdMutationError = unknown;
⋮----
export const usePatchRowsId = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRowsId>>,
    TError,
    { id: string; data: AppRow },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchRowsId>>,
  TError,
  { id: string; data: AppRow },
  TContext
> => {
  const mutationOptions = getPatchRowsIdMutationOptions(options);
export type deleteRowsIdResponse200 = {
  data: void;
  status: 200;
};
⋮----
export type deleteRowsIdResponseComposite = deleteRowsIdResponse200;
⋮----
export type deleteRowsIdResponse = deleteRowsIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getDeleteRowsIdUrl = (id: string) =>
⋮----
export const deleteRowsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteRowsIdResponse> =>
⋮----
export const getDeleteRowsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRowsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRowsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteRowsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRowsId>>,
    { id: string }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRowsId>>,
    { id: string }
> = (props) =>
⋮----
export type DeleteRowsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRowsId>>
>;
⋮----
export type DeleteRowsIdMutationError = unknown;
⋮----
export const useDeleteRowsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRowsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRowsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteRowsIdMutationOptions(options);
</file>

<file path="packages/frontend/app/services/api/tables/tables.ts">
/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
⋮----
import type { AppTable, CreateTableRequest, GetTablesParams } from ".././model";
⋮----
import { customFetch } from "../../../utilities/api";
⋮----
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
⋮----
export type getTablesResponse200 = {
  data: AppTable[];
  status: 200;
};
⋮----
export type getTablesResponseComposite = getTablesResponse200;
⋮----
export type getTablesResponse = getTablesResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetTablesUrl = (params?: GetTablesParams) =>
⋮----
export const getTables = async (
  params?: GetTablesParams,
  options?: RequestInit,
): Promise<getTablesResponse> =>
⋮----
export const getGetTablesQueryKey = (params?: GetTablesParams) =>
⋮----
export const getGetTablesQueryOptions = <
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getTables>>> = ({
    signal,
}) => getTables(params,
⋮----
export type GetTablesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTables>>
>;
export type GetTablesQueryError = unknown;
⋮----
export function useGetTables<
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params: undefined | GetTablesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTables>>,
          TError,
          Awaited<ReturnType<typeof getTables>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetTables<
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTables>>,
          TError,
          Awaited<ReturnType<typeof getTables>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetTables<
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetTables = async <
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type postTablesResponse200 = {
  data: AppTable;
  status: 200;
};
⋮----
export type postTablesResponseComposite = postTablesResponse200;
⋮----
export type postTablesResponse = postTablesResponseComposite & {
  headers: Headers;
};
⋮----
export const getPostTablesUrl = () =>
⋮----
export const postTables = async (
  createTableRequest: CreateTableRequest,
  options?: RequestInit,
): Promise<postTablesResponse> =>
⋮----
export const getPostTablesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTables>>,
    TError,
    { data: CreateTableRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTables>>,
  TError,
  { data: CreateTableRequest },
  TContext
> => {
  const mutationKey = ["postTables"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTables>>,
    { data: CreateTableRequest }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTables>>,
    { data: CreateTableRequest }
> = (props) =>
⋮----
export type PostTablesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTables>>
>;
export type PostTablesMutationBody = CreateTableRequest;
export type PostTablesMutationError = unknown;
⋮----
export const usePostTables = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTables>>,
    TError,
    { data: CreateTableRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postTables>>,
  TError,
  { data: CreateTableRequest },
  TContext
> => {
  const mutationOptions = getPostTablesMutationOptions(options);
export type getTablesIdResponse200 = {
  data: AppTable;
  status: 200;
};
⋮----
export type getTablesIdResponseComposite = getTablesIdResponse200;
⋮----
export type getTablesIdResponse = getTablesIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getGetTablesIdUrl = (id: string) =>
⋮----
export const getTablesId = async (
  id: string,
  options?: RequestInit,
): Promise<getTablesIdResponse> =>
⋮----
export const getGetTablesIdQueryKey = (id: string) =>
⋮----
export const getGetTablesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) =>
⋮----
const queryFn: QueryFunction<Awaited<ReturnType<typeof getTablesId>>> = ({
    signal,
}) => getTablesId(id,
⋮----
export type GetTablesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTablesId>>
>;
export type GetTablesIdQueryError = unknown;
⋮----
export function useGetTablesId<
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTablesId>>,
          TError,
          Awaited<ReturnType<typeof getTablesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> &
export function useGetTablesId<
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTablesId>>,
          TError,
          Awaited<ReturnType<typeof getTablesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
export function useGetTablesId<
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> &
⋮----
export const prefetchGetTablesId = async <
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> =>
⋮----
export type patchTablesIdResponse200 = {
  data: AppTable;
  status: 200;
};
⋮----
export type patchTablesIdResponseComposite = patchTablesIdResponse200;
⋮----
export type patchTablesIdResponse = patchTablesIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getPatchTablesIdUrl = (id: string) =>
⋮----
export const patchTablesId = async (
  id: string,
  appTable: AppTable,
  options?: RequestInit,
): Promise<patchTablesIdResponse> =>
⋮----
export const getPatchTablesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTablesId>>,
    TError,
    { id: string; data: AppTable },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchTablesId>>,
  TError,
  { id: string; data: AppTable },
  TContext
> => {
  const mutationKey = ["patchTablesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchTablesId>>,
    { id: string; data: AppTable }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchTablesId>>,
    { id: string; data: AppTable }
> = (props) =>
⋮----
export type PatchTablesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchTablesId>>
>;
export type PatchTablesIdMutationBody = AppTable;
export type PatchTablesIdMutationError = unknown;
⋮----
export const usePatchTablesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTablesId>>,
    TError,
    { id: string; data: AppTable },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchTablesId>>,
  TError,
  { id: string; data: AppTable },
  TContext
> => {
  const mutationOptions = getPatchTablesIdMutationOptions(options);
export type deleteTablesIdResponse200 = {
  data: void;
  status: 200;
};
⋮----
export type deleteTablesIdResponseComposite = deleteTablesIdResponse200;
⋮----
export type deleteTablesIdResponse = deleteTablesIdResponseComposite & {
  headers: Headers;
};
⋮----
export const getDeleteTablesIdUrl = (id: string) =>
⋮----
export const deleteTablesId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteTablesIdResponse> =>
⋮----
export const getDeleteTablesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTablesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTablesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTablesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTablesId>>,
    { id: string }
> = (props) =>
⋮----
const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTablesId>>,
    { id: string }
> = (props) =>
⋮----
export type DeleteTablesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTablesId>>
>;
⋮----
export type DeleteTablesIdMutationError = unknown;
⋮----
export const useDeleteTablesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTablesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTablesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTablesIdMutationOptions(options);
</file>

<file path="packages/frontend/package.json">
{
  "name": "datanaut",
  "private": true,
  "sideEffects": false,
  "type": "module",
  "scripts": {
    "build": "remix vite:build",
    "dev": "remix vite:dev",
    "lint": "eslint --ignore-path .gitignore --cache --cache-location ./node_modules/.cache/eslint .",
    "start": "remix-serve ./build/server/index.js",
    "gen:api": "orval --config ./orval.config.ts",
    "typecheck": "tsc"
  },
  "dependencies": {
    "@faker-js/faker": "^9.6.0",
    "@radix-ui/themes": "^3.2.1",
    "@remix-run/node": "^2.16.3",
    "@remix-run/react": "^2.16.3",
    "@remix-run/serve": "^2.16.3",
    "@tanstack/react-query": "^5.71.1",
    "@tanstack/react-table": "^8.21.2",
    "isbot": "^4.1.0",
    "pg": "^8.14.1",
    "query-string": "^9.1.1",
    "react": "^19",
    "react-dom": "^19",
    "remix-utils": "^8.5.0",
    "sass": "^1.86.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-dist": "^5.20.2",
    "swagger-ui-express": "^5.0.1",
    "swagger-ui-react": "^5.20.2"
  },
  "devDependencies": {
    "@remix-run/dev": "^2.16.3",
    "@types/nodemailer": "^6.4.17",
    "@types/pg": "^8.11.11",
    "@types/react": "^18.2.20",
    "@types/react-dom": "^18.2.7",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-dist": "^3.30.5",
    "@types/swagger-ui-express": "^4.1.8",
    "@types/swagger-ui-react": "^5.18.0",
    "@typescript-eslint/eslint-plugin": "^6.7.4",
    "@typescript-eslint/parser": "^6.7.4",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.38.0",
    "eslint-import-resolver-typescript": "^3.6.1",
    "eslint-plugin-import": "^2.28.1",
    "eslint-plugin-jsx-a11y": "^6.7.1",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "kanel": "^3.11.1",
    "nodemailer": "^6.10.0",
    "orval": "^7.7.0",
    "postcss": "^8.4.38",
    "prettier": "^3.5.3",
    "typescript": "^5.1.6",
    "vite": "^6.0.0",
    "vite-tsconfig-paths": "^4.2.1"
  },
  "engines": {
    "node": ">=20.0.0"
  }
}
</file>

</files>
