/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Datanaut API
 * Datanaut is a cloud-based platform that combines the functionality of a spreadsheet with a database, allowing users to organize, collaborate on, and customize data in a visually intuitive interface
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  AppColumn,
  GetApiColumnsParams,
  PostApiColumnsBody,
} from ".././model";

/**
 * Updates properties of an existing column
 * @summary Update a column
 */
export const patchApiColumnsColumnId = (
  columnId: string,
  appColumn: AppColumn,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppColumn>> => {
  return axios.patch(`/api/api/columns/${columnId}`, appColumn, options);
};

export const getPatchApiColumnsColumnIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiColumnsColumnId>>,
    TError,
    { columnId: string; data: AppColumn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiColumnsColumnId>>,
  TError,
  { columnId: string; data: AppColumn },
  TContext
> => {
  const mutationKey = ["patchApiColumnsColumnId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiColumnsColumnId>>,
    { columnId: string; data: AppColumn }
  > = (props) => {
    const { columnId, data } = props ?? {};

    return patchApiColumnsColumnId(columnId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiColumnsColumnIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiColumnsColumnId>>
>;
export type PatchApiColumnsColumnIdMutationBody = AppColumn;
export type PatchApiColumnsColumnIdMutationError = AxiosError<void>;

/**
 * @summary Update a column
 */
export const usePatchApiColumnsColumnId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiColumnsColumnId>>,
    TError,
    { columnId: string; data: AppColumn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiColumnsColumnId>>,
  TError,
  { columnId: string; data: AppColumn },
  TContext
> => {
  const mutationOptions = getPatchApiColumnsColumnIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Permanently deletes a column from a table
 * @summary Delete a column
 */
export const deleteApiColumnsColumnId = (
  columnId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppColumn>> => {
  return axios.delete(`/api/api/columns/${columnId}`, options);
};

export const getDeleteApiColumnsColumnIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiColumnsColumnId>>,
    TError,
    { columnId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiColumnsColumnId>>,
  TError,
  { columnId: string },
  TContext
> => {
  const mutationKey = ["deleteApiColumnsColumnId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiColumnsColumnId>>,
    { columnId: string }
  > = (props) => {
    const { columnId } = props ?? {};

    return deleteApiColumnsColumnId(columnId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiColumnsColumnIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiColumnsColumnId>>
>;

export type DeleteApiColumnsColumnIdMutationError = AxiosError<void>;

/**
 * @summary Delete a column
 */
export const useDeleteApiColumnsColumnId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiColumnsColumnId>>,
    TError,
    { columnId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiColumnsColumnId>>,
  TError,
  { columnId: string },
  TContext
> => {
  const mutationOptions = getDeleteApiColumnsColumnIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get all columns for a table
 */
export const getApiColumns = (
  params: GetApiColumnsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppColumn[]>> => {
  return axios.get(`/api/api/columns`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiColumnsQueryKey = (params: GetApiColumnsParams) => {
  return [`/api/api/columns`, ...(params ? [params] : [])] as const;
};

export const getGetApiColumnsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiColumns>>,
  TError = AxiosError<void>,
>(
  params: GetApiColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiColumns>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiColumnsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiColumns>>> = ({
    signal,
  }) => getApiColumns(params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiColumns>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiColumnsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiColumns>>
>;
export type GetApiColumnsQueryError = AxiosError<void>;

export function useGetApiColumns<
  TData = Awaited<ReturnType<typeof getApiColumns>>,
  TError = AxiosError<void>,
>(
  params: GetApiColumnsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiColumns>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiColumns>>,
          TError,
          Awaited<ReturnType<typeof getApiColumns>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiColumns<
  TData = Awaited<ReturnType<typeof getApiColumns>>,
  TError = AxiosError<void>,
>(
  params: GetApiColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiColumns>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiColumns>>,
          TError,
          Awaited<ReturnType<typeof getApiColumns>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiColumns<
  TData = Awaited<ReturnType<typeof getApiColumns>>,
  TError = AxiosError<void>,
>(
  params: GetApiColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiColumns>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all columns for a table
 */

export function useGetApiColumns<
  TData = Awaited<ReturnType<typeof getApiColumns>>,
  TError = AxiosError<void>,
>(
  params: GetApiColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiColumns>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiColumnsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all columns for a table
 */
export const prefetchGetApiColumns = async <
  TData = Awaited<ReturnType<typeof getApiColumns>>,
  TError = AxiosError<void>,
>(
  queryClient: QueryClient,
  params: GetApiColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiColumns>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetApiColumnsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create a new column
 */
export const postApiColumns = (
  postApiColumnsBody: PostApiColumnsBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppColumn>> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append("tableId", postApiColumnsBody.tableId);
  formUrlEncoded.append("data", JSON.stringify(postApiColumnsBody.data));

  return axios.post(`/api/api/columns`, formUrlEncoded, options);
};

export const getPostApiColumnsMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiColumns>>,
    TError,
    { data: PostApiColumnsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiColumns>>,
  TError,
  { data: PostApiColumnsBody },
  TContext
> => {
  const mutationKey = ["postApiColumns"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiColumns>>,
    { data: PostApiColumnsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiColumns(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiColumnsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiColumns>>
>;
export type PostApiColumnsMutationBody = PostApiColumnsBody;
export type PostApiColumnsMutationError = AxiosError<void>;

/**
 * @summary Create a new column
 */
export const usePostApiColumns = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiColumns>>,
    TError,
    { data: PostApiColumnsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiColumns>>,
  TError,
  { data: PostApiColumnsBody },
  TContext
> => {
  const mutationOptions = getPostApiColumnsMutationOptions(options);

  return useMutation(mutationOptions);
};
