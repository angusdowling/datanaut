/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ColumnDto,
  CreateColumnDto,
  GetColumnsParams,
  UpdateColumnDto,
} from ".././model";

import { customFetch } from "../../../utilities/api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getColumnsResponse200 = {
  data: ColumnDto[];
  status: 200;
};

export type getColumnsResponseComposite = getColumnsResponse200;

export type getColumnsResponse = getColumnsResponseComposite & {
  headers: Headers;
};

export const getGetColumnsUrl = (params?: GetColumnsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/columns?${stringifiedParams}`
    : `/api/columns`;
};

export const getColumns = async (
  params?: GetColumnsParams,
  options?: RequestInit,
): Promise<getColumnsResponse> => {
  return customFetch<getColumnsResponse>(getGetColumnsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetColumnsQueryKey = (params?: GetColumnsParams) => {
  return [`/api/columns`, ...(params ? [params] : [])] as const;
};

export const getGetColumnsQueryOptions = <
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetColumnsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getColumns>>> = ({
    signal,
  }) => getColumns(params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getColumns>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetColumnsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getColumns>>
>;
export type GetColumnsQueryError = unknown;

export function useGetColumns<
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params: undefined | GetColumnsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getColumns>>,
          TError,
          Awaited<ReturnType<typeof getColumns>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetColumns<
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getColumns>>,
          TError,
          Awaited<ReturnType<typeof getColumns>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetColumns<
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetColumns<
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetColumnsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetColumns = async <
  TData = Awaited<ReturnType<typeof getColumns>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetColumnsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumns>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetColumnsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type postColumnsResponse200 = {
  data: ColumnDto;
  status: 200;
};

export type postColumnsResponseComposite = postColumnsResponse200;

export type postColumnsResponse = postColumnsResponseComposite & {
  headers: Headers;
};

export const getPostColumnsUrl = () => {
  return `/api/columns`;
};

export const postColumns = async (
  createColumnDto: CreateColumnDto,
  options?: RequestInit,
): Promise<postColumnsResponse> => {
  return customFetch<postColumnsResponse>(getPostColumnsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createColumnDto),
  });
};

export const getPostColumnsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postColumns>>,
    TError,
    { data: CreateColumnDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postColumns>>,
  TError,
  { data: CreateColumnDto },
  TContext
> => {
  const mutationKey = ["postColumns"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postColumns>>,
    { data: CreateColumnDto }
  > = (props) => {
    const { data } = props ?? {};

    return postColumns(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostColumnsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postColumns>>
>;
export type PostColumnsMutationBody = CreateColumnDto;
export type PostColumnsMutationError = unknown;

export const usePostColumns = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postColumns>>,
    TError,
    { data: CreateColumnDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postColumns>>,
  TError,
  { data: CreateColumnDto },
  TContext
> => {
  const mutationOptions = getPostColumnsMutationOptions(options);

  return useMutation(mutationOptions);
};
export type getColumnsIdResponse200 = {
  data: ColumnDto;
  status: 200;
};

export type getColumnsIdResponseComposite = getColumnsIdResponse200;

export type getColumnsIdResponse = getColumnsIdResponseComposite & {
  headers: Headers;
};

export const getGetColumnsIdUrl = (id: string) => {
  return `/api/columns/${id}`;
};

export const getColumnsId = async (
  id: string,
  options?: RequestInit,
): Promise<getColumnsIdResponse> => {
  return customFetch<getColumnsIdResponse>(getGetColumnsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetColumnsIdQueryKey = (id: string) => {
  return [`/api/columns/${id}`] as const;
};

export const getGetColumnsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetColumnsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getColumnsId>>> = ({
    signal,
  }) => getColumnsId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getColumnsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetColumnsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getColumnsId>>
>;
export type GetColumnsIdQueryError = unknown;

export function useGetColumnsId<
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getColumnsId>>,
          TError,
          Awaited<ReturnType<typeof getColumnsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetColumnsId<
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getColumnsId>>,
          TError,
          Awaited<ReturnType<typeof getColumnsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetColumnsId<
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetColumnsId<
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetColumnsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetColumnsId = async <
  TData = Awaited<ReturnType<typeof getColumnsId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getColumnsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetColumnsIdQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type patchColumnsIdResponse200 = {
  data: ColumnDto;
  status: 200;
};

export type patchColumnsIdResponseComposite = patchColumnsIdResponse200;

export type patchColumnsIdResponse = patchColumnsIdResponseComposite & {
  headers: Headers;
};

export const getPatchColumnsIdUrl = (id: string) => {
  return `/api/columns/${id}`;
};

export const patchColumnsId = async (
  id: string,
  updateColumnDto: UpdateColumnDto,
  options?: RequestInit,
): Promise<patchColumnsIdResponse> => {
  return customFetch<patchColumnsIdResponse>(getPatchColumnsIdUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateColumnDto),
  });
};

export const getPatchColumnsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchColumnsId>>,
    TError,
    { id: string; data: UpdateColumnDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchColumnsId>>,
  TError,
  { id: string; data: UpdateColumnDto },
  TContext
> => {
  const mutationKey = ["patchColumnsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchColumnsId>>,
    { id: string; data: UpdateColumnDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchColumnsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchColumnsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchColumnsId>>
>;
export type PatchColumnsIdMutationBody = UpdateColumnDto;
export type PatchColumnsIdMutationError = unknown;

export const usePatchColumnsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchColumnsId>>,
    TError,
    { id: string; data: UpdateColumnDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchColumnsId>>,
  TError,
  { id: string; data: UpdateColumnDto },
  TContext
> => {
  const mutationOptions = getPatchColumnsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export type deleteColumnsIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteColumnsIdResponseComposite = deleteColumnsIdResponse200;

export type deleteColumnsIdResponse = deleteColumnsIdResponseComposite & {
  headers: Headers;
};

export const getDeleteColumnsIdUrl = (id: string) => {
  return `/api/columns/${id}`;
};

export const deleteColumnsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteColumnsIdResponse> => {
  return customFetch<deleteColumnsIdResponse>(getDeleteColumnsIdUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteColumnsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteColumnsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteColumnsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteColumnsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteColumnsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteColumnsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteColumnsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteColumnsId>>
>;

export type DeleteColumnsIdMutationError = unknown;

export const useDeleteColumnsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteColumnsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteColumnsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteColumnsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
