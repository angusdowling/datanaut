/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { CreateRoleDto, RoleDto, UpdateRoleDto } from ".././model";

import { customFetch } from "../../../utilities/api";
import { useCustomMutatorOptions } from "../../../features/api/hooks/useCustomMutatorOptions";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getRolesResponse200 = {
  data: RoleDto[];
  status: 200;
};

export type getRolesResponseComposite = getRolesResponse200;

export type getRolesResponse = getRolesResponseComposite & {
  headers: Headers;
};

export const getGetRolesUrl = () => {
  return `/api/roles`;
};

export const getRoles = async (
  options?: RequestInit,
): Promise<getRolesResponse> => {
  return customFetch<getRolesResponse>(getGetRolesUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetRolesQueryKey = () => {
  return [`/api/roles`] as const;
};

export const getGetRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getRoles>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRolesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRoles>>> = ({
    signal,
  }) => getRoles({ signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRoles>>
>;
export type GetRolesQueryError = unknown;

export function useGetRoles<
  TData = Awaited<ReturnType<typeof getRoles>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRoles>>,
        TError,
        Awaited<ReturnType<typeof getRoles>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRoles<
  TData = Awaited<ReturnType<typeof getRoles>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRoles>>,
        TError,
        Awaited<ReturnType<typeof getRoles>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRoles<
  TData = Awaited<ReturnType<typeof getRoles>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetRoles<
  TData = Awaited<ReturnType<typeof getRoles>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRolesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetRoles = async <
  TData = Awaited<ReturnType<typeof getRoles>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetRolesQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type postRolesResponse200 = {
  data: RoleDto;
  status: 200;
};

export type postRolesResponseComposite = postRolesResponse200;

export type postRolesResponse = postRolesResponseComposite & {
  headers: Headers;
};

export const getPostRolesUrl = () => {
  return `/api/roles`;
};

export const postRoles = async (
  createRoleDto: CreateRoleDto,
  options?: RequestInit,
): Promise<postRolesResponse> => {
  return customFetch<postRolesResponse>(getPostRolesUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createRoleDto),
  });
};

export const usePostRolesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRoles>>,
    TError,
    { data: CreateRoleDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRoles>>,
  TError,
  { data: CreateRoleDto },
  TContext
> => {
  const mutationKey = ["postRoles"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRoles>>,
    { data: CreateRoleDto }
  > = (props) => {
    const { data } = props ?? {};

    return postRoles(data, requestOptions);
  };

  const customOptions = useCustomMutatorOptions(
    { ...mutationOptions, mutationFn },
    { url: `/api/roles` },
    { operationId: "PostRoles", operationName: "postRoles" },
  );

  return customOptions;
};

export type PostRolesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRoles>>
>;
export type PostRolesMutationBody = CreateRoleDto;
export type PostRolesMutationError = unknown;

export const usePostRoles = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRoles>>,
    TError,
    { data: CreateRoleDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postRoles>>,
  TError,
  { data: CreateRoleDto },
  TContext
> => {
  const mutationOptions = usePostRolesMutationOptions(options);

  return useMutation(mutationOptions);
};
export type getRolesIdResponse200 = {
  data: RoleDto;
  status: 200;
};

export type getRolesIdResponseComposite = getRolesIdResponse200;

export type getRolesIdResponse = getRolesIdResponseComposite & {
  headers: Headers;
};

export const getGetRolesIdUrl = (id: string) => {
  return `/api/roles/${id}`;
};

export const getRolesId = async (
  id: string,
  options?: RequestInit,
): Promise<getRolesIdResponse> => {
  return customFetch<getRolesIdResponse>(getGetRolesIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetRolesIdQueryKey = (id: string) => {
  return [`/api/roles/${id}`] as const;
};

export const getGetRolesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getRolesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRolesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRolesId>>> = ({
    signal,
  }) => getRolesId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRolesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRolesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRolesId>>
>;
export type GetRolesIdQueryError = unknown;

export function useGetRolesId<
  TData = Awaited<ReturnType<typeof getRolesId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRolesId>>,
          TError,
          Awaited<ReturnType<typeof getRolesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRolesId<
  TData = Awaited<ReturnType<typeof getRolesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRolesId>>,
          TError,
          Awaited<ReturnType<typeof getRolesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRolesId<
  TData = Awaited<ReturnType<typeof getRolesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetRolesId<
  TData = Awaited<ReturnType<typeof getRolesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRolesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetRolesId = async <
  TData = Awaited<ReturnType<typeof getRolesId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRolesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetRolesIdQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type patchRolesIdResponse200 = {
  data: RoleDto;
  status: 200;
};

export type patchRolesIdResponseComposite = patchRolesIdResponse200;

export type patchRolesIdResponse = patchRolesIdResponseComposite & {
  headers: Headers;
};

export const getPatchRolesIdUrl = (id: string) => {
  return `/api/roles/${id}`;
};

export const patchRolesId = async (
  id: string,
  updateRoleDto: UpdateRoleDto,
  options?: RequestInit,
): Promise<patchRolesIdResponse> => {
  return customFetch<patchRolesIdResponse>(getPatchRolesIdUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRoleDto),
  });
};

export const usePatchRolesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRolesId>>,
    TError,
    { id: string; data: UpdateRoleDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRolesId>>,
  TError,
  { id: string; data: UpdateRoleDto },
  TContext
> => {
  const mutationKey = ["patchRolesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRolesId>>,
    { id: string; data: UpdateRoleDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchRolesId(id, data, requestOptions);
  };

  const customOptions = useCustomMutatorOptions(
    { ...mutationOptions, mutationFn },
    { url: `/api/roles/{id}` },
    { operationId: "PatchRolesId", operationName: "patchRolesId" },
  );

  return customOptions;
};

export type PatchRolesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRolesId>>
>;
export type PatchRolesIdMutationBody = UpdateRoleDto;
export type PatchRolesIdMutationError = unknown;

export const usePatchRolesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRolesId>>,
    TError,
    { id: string; data: UpdateRoleDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchRolesId>>,
  TError,
  { id: string; data: UpdateRoleDto },
  TContext
> => {
  const mutationOptions = usePatchRolesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export type deleteRolesIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteRolesIdResponseComposite = deleteRolesIdResponse200;

export type deleteRolesIdResponse = deleteRolesIdResponseComposite & {
  headers: Headers;
};

export const getDeleteRolesIdUrl = (id: string) => {
  return `/api/roles/${id}`;
};

export const deleteRolesId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteRolesIdResponse> => {
  return customFetch<deleteRolesIdResponse>(getDeleteRolesIdUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const useDeleteRolesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRolesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRolesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteRolesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRolesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteRolesId(id, requestOptions);
  };

  const customOptions = useCustomMutatorOptions(
    { ...mutationOptions, mutationFn },
    { url: `/api/roles/{id}` },
    { operationId: "DeleteRolesId", operationName: "deleteRolesId" },
  );

  return customOptions;
};

export type DeleteRolesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRolesId>>
>;

export type DeleteRolesIdMutationError = unknown;

export const useDeleteRolesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRolesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRolesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = useDeleteRolesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
