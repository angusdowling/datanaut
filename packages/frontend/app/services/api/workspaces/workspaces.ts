/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Datanaut API
 * Datanaut is a cloud-based platform that combines the functionality of a spreadsheet with a database, allowing users to organize, collaborate on, and customize data in a visually intuitive interface
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  GetApiWorkspacesParams,
  PatchApiWorkspacesWorkspaceIdBody,
  PostApiWorkspacesBody,
  Workspace,
} from ".././model";

/**
 * @summary Update a workspace
 */
export const patchApiWorkspacesWorkspaceId = (
  workspaceId: string,
  patchApiWorkspacesWorkspaceIdBody: PatchApiWorkspacesWorkspaceIdBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Workspace>> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append(
    "data",
    JSON.stringify(patchApiWorkspacesWorkspaceIdBody.data),
  );

  return axios.patch(`/api/workspaces/${workspaceId}`, formUrlEncoded, options);
};

export const getPatchApiWorkspacesWorkspaceIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiWorkspacesWorkspaceId>>,
    TError,
    { workspaceId: string; data: PatchApiWorkspacesWorkspaceIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiWorkspacesWorkspaceId>>,
  TError,
  { workspaceId: string; data: PatchApiWorkspacesWorkspaceIdBody },
  TContext
> => {
  const mutationKey = ["patchApiWorkspacesWorkspaceId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiWorkspacesWorkspaceId>>,
    { workspaceId: string; data: PatchApiWorkspacesWorkspaceIdBody }
  > = (props) => {
    const { workspaceId, data } = props ?? {};

    return patchApiWorkspacesWorkspaceId(workspaceId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiWorkspacesWorkspaceIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiWorkspacesWorkspaceId>>
>;
export type PatchApiWorkspacesWorkspaceIdMutationBody =
  PatchApiWorkspacesWorkspaceIdBody;
export type PatchApiWorkspacesWorkspaceIdMutationError = AxiosError<void>;

/**
 * @summary Update a workspace
 */
export const usePatchApiWorkspacesWorkspaceId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiWorkspacesWorkspaceId>>,
    TError,
    { workspaceId: string; data: PatchApiWorkspacesWorkspaceIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiWorkspacesWorkspaceId>>,
  TError,
  { workspaceId: string; data: PatchApiWorkspacesWorkspaceIdBody },
  TContext
> => {
  const mutationOptions =
    getPatchApiWorkspacesWorkspaceIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete a workspace
 */
export const deleteApiWorkspacesWorkspaceId = (
  workspaceId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Workspace>> => {
  return axios.delete(`/api/workspaces/${workspaceId}`, options);
};

export const getDeleteApiWorkspacesWorkspaceIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiWorkspacesWorkspaceId>>,
    TError,
    { workspaceId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiWorkspacesWorkspaceId>>,
  TError,
  { workspaceId: string },
  TContext
> => {
  const mutationKey = ["deleteApiWorkspacesWorkspaceId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiWorkspacesWorkspaceId>>,
    { workspaceId: string }
  > = (props) => {
    const { workspaceId } = props ?? {};

    return deleteApiWorkspacesWorkspaceId(workspaceId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiWorkspacesWorkspaceIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiWorkspacesWorkspaceId>>
>;

export type DeleteApiWorkspacesWorkspaceIdMutationError = AxiosError<void>;

/**
 * @summary Delete a workspace
 */
export const useDeleteApiWorkspacesWorkspaceId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiWorkspacesWorkspaceId>>,
    TError,
    { workspaceId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiWorkspacesWorkspaceId>>,
  TError,
  { workspaceId: string },
  TContext
> => {
  const mutationOptions =
    getDeleteApiWorkspacesWorkspaceIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Returns a list of workspaces, optionally filtered by tenantId
 * @summary Get all workspaces
 */
export const getApiWorkspaces = (
  params?: GetApiWorkspacesParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Workspace[]>> => {
  return axios.get(`/api/workspaces`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiWorkspacesQueryKey = (
  params?: GetApiWorkspacesParams,
) => {
  return [`/api/workspaces`, ...(params ? [params] : [])] as const;
};

export const getGetApiWorkspacesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiWorkspaces>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWorkspaces>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiWorkspacesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiWorkspaces>>
  > = ({ signal }) => getApiWorkspaces(params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiWorkspaces>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiWorkspacesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiWorkspaces>>
>;
export type GetApiWorkspacesQueryError = AxiosError<unknown>;

export function useGetApiWorkspaces<
  TData = Awaited<ReturnType<typeof getApiWorkspaces>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | GetApiWorkspacesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWorkspaces>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof getApiWorkspaces>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiWorkspaces<
  TData = Awaited<ReturnType<typeof getApiWorkspaces>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWorkspaces>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof getApiWorkspaces>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiWorkspaces<
  TData = Awaited<ReturnType<typeof getApiWorkspaces>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWorkspaces>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all workspaces
 */

export function useGetApiWorkspaces<
  TData = Awaited<ReturnType<typeof getApiWorkspaces>>,
  TError = AxiosError<unknown>,
>(
  params?: GetApiWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWorkspaces>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiWorkspacesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all workspaces
 */
export const prefetchGetApiWorkspaces = async <
  TData = Awaited<ReturnType<typeof getApiWorkspaces>>,
  TError = AxiosError<unknown>,
>(
  queryClient: QueryClient,
  params?: GetApiWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiWorkspaces>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetApiWorkspacesQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create a new workspace
 */
export const postApiWorkspaces = (
  postApiWorkspacesBody: PostApiWorkspacesBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Workspace>> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append("name", postApiWorkspacesBody.name);
  formUrlEncoded.append("tenantId", postApiWorkspacesBody.tenantId);

  return axios.post(`/api/workspaces`, formUrlEncoded, options);
};

export const getPostApiWorkspacesMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiWorkspaces>>,
    TError,
    { data: PostApiWorkspacesBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiWorkspaces>>,
  TError,
  { data: PostApiWorkspacesBody },
  TContext
> => {
  const mutationKey = ["postApiWorkspaces"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiWorkspaces>>,
    { data: PostApiWorkspacesBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiWorkspaces(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiWorkspacesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiWorkspaces>>
>;
export type PostApiWorkspacesMutationBody = PostApiWorkspacesBody;
export type PostApiWorkspacesMutationError = AxiosError<void>;

/**
 * @summary Create a new workspace
 */
export const usePostApiWorkspaces = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiWorkspaces>>,
    TError,
    { data: PostApiWorkspacesBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiWorkspaces>>,
  TError,
  { data: PostApiWorkspacesBody },
  TContext
> => {
  const mutationOptions = getPostApiWorkspacesMutationOptions(options);

  return useMutation(mutationOptions);
};
