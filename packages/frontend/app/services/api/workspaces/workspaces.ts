/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateWorkspaceRequest,
  GetWorkspacesParams,
  Workspace,
} from ".././model";

import { customFetch } from "../../../utilities/api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getWorkspacesResponse200 = {
  data: Workspace[];
  status: 200;
};

export type getWorkspacesResponseComposite = getWorkspacesResponse200;

export type getWorkspacesResponse = getWorkspacesResponseComposite & {
  headers: Headers;
};

export const getGetWorkspacesUrl = (params?: GetWorkspacesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/workspaces?${stringifiedParams}`
    : `/api/workspaces`;
};

export const getWorkspaces = async (
  params?: GetWorkspacesParams,
  options?: RequestInit,
): Promise<getWorkspacesResponse> => {
  return customFetch<getWorkspacesResponse>(getGetWorkspacesUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetWorkspacesQueryKey = (params?: GetWorkspacesParams) => {
  return [`/api/workspaces`, ...(params ? [params] : [])] as const;
};

export const getGetWorkspacesQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorkspacesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkspaces>>> = ({
    signal,
  }) => getWorkspaces(params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorkspaces>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWorkspacesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorkspaces>>
>;
export type GetWorkspacesQueryError = unknown;

export function useGetWorkspaces<
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params: undefined | GetWorkspacesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof getWorkspaces>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWorkspaces<
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspaces>>,
          TError,
          Awaited<ReturnType<typeof getWorkspaces>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWorkspaces<
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetWorkspaces<
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWorkspacesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetWorkspaces = async <
  TData = Awaited<ReturnType<typeof getWorkspaces>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetWorkspacesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWorkspaces>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetWorkspacesQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type postWorkspacesResponse200 = {
  data: Workspace;
  status: 200;
};

export type postWorkspacesResponseComposite = postWorkspacesResponse200;

export type postWorkspacesResponse = postWorkspacesResponseComposite & {
  headers: Headers;
};

export const getPostWorkspacesUrl = () => {
  return `/api/workspaces`;
};

export const postWorkspaces = async (
  createWorkspaceRequest: CreateWorkspaceRequest,
  options?: RequestInit,
): Promise<postWorkspacesResponse> => {
  return customFetch<postWorkspacesResponse>(getPostWorkspacesUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createWorkspaceRequest),
  });
};

export const getPostWorkspacesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorkspaces>>,
    TError,
    { data: CreateWorkspaceRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postWorkspaces>>,
  TError,
  { data: CreateWorkspaceRequest },
  TContext
> => {
  const mutationKey = ["postWorkspaces"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postWorkspaces>>,
    { data: CreateWorkspaceRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postWorkspaces(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostWorkspacesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postWorkspaces>>
>;
export type PostWorkspacesMutationBody = CreateWorkspaceRequest;
export type PostWorkspacesMutationError = unknown;

export const usePostWorkspaces = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postWorkspaces>>,
    TError,
    { data: CreateWorkspaceRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postWorkspaces>>,
  TError,
  { data: CreateWorkspaceRequest },
  TContext
> => {
  const mutationOptions = getPostWorkspacesMutationOptions(options);

  return useMutation(mutationOptions);
};
export type getWorkspacesIdResponse200 = {
  data: Workspace;
  status: 200;
};

export type getWorkspacesIdResponseComposite = getWorkspacesIdResponse200;

export type getWorkspacesIdResponse = getWorkspacesIdResponseComposite & {
  headers: Headers;
};

export const getGetWorkspacesIdUrl = (id: string) => {
  return `/api/workspaces/${id}`;
};

export const getWorkspacesId = async (
  id: string,
  options?: RequestInit,
): Promise<getWorkspacesIdResponse> => {
  return customFetch<getWorkspacesIdResponse>(getGetWorkspacesIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetWorkspacesIdQueryKey = (id: string) => {
  return [`/api/workspaces/${id}`] as const;
};

export const getGetWorkspacesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorkspacesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorkspacesId>>> = ({
    signal,
  }) => getWorkspacesId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorkspacesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWorkspacesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorkspacesId>>
>;
export type GetWorkspacesIdQueryError = unknown;

export function useGetWorkspacesId<
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspacesId>>,
          TError,
          Awaited<ReturnType<typeof getWorkspacesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWorkspacesId<
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorkspacesId>>,
          TError,
          Awaited<ReturnType<typeof getWorkspacesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWorkspacesId<
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetWorkspacesId<
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWorkspacesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetWorkspacesId = async <
  TData = Awaited<ReturnType<typeof getWorkspacesId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getWorkspacesId>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetWorkspacesIdQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type patchWorkspacesIdResponse200 = {
  data: Workspace;
  status: 200;
};

export type patchWorkspacesIdResponseComposite = patchWorkspacesIdResponse200;

export type patchWorkspacesIdResponse = patchWorkspacesIdResponseComposite & {
  headers: Headers;
};

export const getPatchWorkspacesIdUrl = (id: string) => {
  return `/api/workspaces/${id}`;
};

export const patchWorkspacesId = async (
  id: string,
  workspace: Workspace,
  options?: RequestInit,
): Promise<patchWorkspacesIdResponse> => {
  return customFetch<patchWorkspacesIdResponse>(getPatchWorkspacesIdUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(workspace),
  });
};

export const getPatchWorkspacesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchWorkspacesId>>,
    TError,
    { id: string; data: Workspace },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchWorkspacesId>>,
  TError,
  { id: string; data: Workspace },
  TContext
> => {
  const mutationKey = ["patchWorkspacesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchWorkspacesId>>,
    { id: string; data: Workspace }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchWorkspacesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchWorkspacesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchWorkspacesId>>
>;
export type PatchWorkspacesIdMutationBody = Workspace;
export type PatchWorkspacesIdMutationError = unknown;

export const usePatchWorkspacesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchWorkspacesId>>,
    TError,
    { id: string; data: Workspace },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchWorkspacesId>>,
  TError,
  { id: string; data: Workspace },
  TContext
> => {
  const mutationOptions = getPatchWorkspacesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export type deleteWorkspacesIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteWorkspacesIdResponseComposite = deleteWorkspacesIdResponse200;

export type deleteWorkspacesIdResponse = deleteWorkspacesIdResponseComposite & {
  headers: Headers;
};

export const getDeleteWorkspacesIdUrl = (id: string) => {
  return `/api/workspaces/${id}`;
};

export const deleteWorkspacesId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteWorkspacesIdResponse> => {
  return customFetch<deleteWorkspacesIdResponse>(getDeleteWorkspacesIdUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteWorkspacesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorkspacesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWorkspacesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteWorkspacesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWorkspacesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteWorkspacesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteWorkspacesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWorkspacesId>>
>;

export type DeleteWorkspacesIdMutationError = unknown;

export const useDeleteWorkspacesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorkspacesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteWorkspacesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteWorkspacesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
