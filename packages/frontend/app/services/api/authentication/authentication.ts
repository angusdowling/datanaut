/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Datanaut API
 * Datanaut is a cloud-based platform that combines the functionality of a spreadsheet with a database, allowing users to organize, collaborate on, and customize data in a visually intuitive interface
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  Error,
  PostApiLogin200,
  PostApiLoginBody,
  PostApiVerifyBody,
} from ".././model";

/**
 * Generates a 6-digit code and sends it to the provided email address. The code expires after 15 minutes.
 * @summary Initiates the login process by sending a verification code
 */
export type postApiLoginResponse200 = {
  data: PostApiLogin200;
  status: 200;
};

export type postApiLoginResponse400 = {
  data: Error;
  status: 400;
};

export type postApiLoginResponseComposite =
  | postApiLoginResponse200
  | postApiLoginResponse400;

export type postApiLoginResponse = postApiLoginResponseComposite & {
  headers: Headers;
};

export const getPostApiLoginUrl = () => {
  return `http://localhost:5173/api/login`;
};

export const postApiLogin = async (
  postApiLoginBody: PostApiLoginBody,
  options?: RequestInit,
): Promise<postApiLoginResponse> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append("email", postApiLoginBody.email);

  const res = await fetch(getPostApiLoginUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postApiLoginResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postApiLoginResponse;
};

export const getPostApiLoginMutationOptions = <
  TError = Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiLogin>>,
    TError,
    { data: PostApiLoginBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiLogin>>,
  TError,
  { data: PostApiLoginBody },
  TContext
> => {
  const mutationKey = ["postApiLogin"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiLogin>>,
    { data: PostApiLoginBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiLogin(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiLogin>>
>;
export type PostApiLoginMutationBody = PostApiLoginBody;
export type PostApiLoginMutationError = Error;

/**
 * @summary Initiates the login process by sending a verification code
 */
export const usePostApiLogin = <TError = Error, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiLogin>>,
    TError,
    { data: PostApiLoginBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiLogin>>,
  TError,
  { data: PostApiLoginBody },
  TContext
> => {
  const mutationOptions = getPostApiLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Validates the provided verification code, updates the token status, and creates a user session if valid.
 * @summary Verifies a login code and creates a user session
 */
export type postApiVerifyResponse200 = {
  data: void;
  status: 200;
};

export type postApiVerifyResponse400 = {
  data: Error;
  status: 400;
};

export type postApiVerifyResponseComposite =
  | postApiVerifyResponse200
  | postApiVerifyResponse400;

export type postApiVerifyResponse = postApiVerifyResponseComposite & {
  headers: Headers;
};

export const getPostApiVerifyUrl = () => {
  return `http://localhost:5173/api/verify`;
};

export const postApiVerify = async (
  postApiVerifyBody: PostApiVerifyBody,
  options?: RequestInit,
): Promise<postApiVerifyResponse> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append("code", postApiVerifyBody.code);

  const res = await fetch(getPostApiVerifyUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postApiVerifyResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postApiVerifyResponse;
};

export const getPostApiVerifyMutationOptions = <
  TError = Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiVerify>>,
    TError,
    { data: PostApiVerifyBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiVerify>>,
  TError,
  { data: PostApiVerifyBody },
  TContext
> => {
  const mutationKey = ["postApiVerify"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiVerify>>,
    { data: PostApiVerifyBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiVerify(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiVerifyMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiVerify>>
>;
export type PostApiVerifyMutationBody = PostApiVerifyBody;
export type PostApiVerifyMutationError = Error;

/**
 * @summary Verifies a login code and creates a user session
 */
export const usePostApiVerify = <TError = Error, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiVerify>>,
    TError,
    { data: PostApiVerifyBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiVerify>>,
  TError,
  { data: PostApiVerifyBody },
  TContext
> => {
  const mutationOptions = getPostApiVerifyMutationOptions(options);

  return useMutation(mutationOptions);
};
