/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Datanaut API
 * Datanaut is a cloud-based platform that combines the functionality of a spreadsheet with a database, allowing users to organize, collaborate on, and customize data in a visually intuitive interface
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type { AppRow, GetApiRowsParams, PostApiRowsBody } from ".././model";

/**
 * Updates properties of an existing row
 * @summary Update a row
 */
export const patchApiRowsRowId = (
  rowId: string,
  appRow: AppRow,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppRow>> => {
  return axios.patch(`/api/api/rows/${rowId}`, appRow, options);
};

export const getPatchApiRowsRowIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiRowsRowId>>,
    TError,
    { rowId: string; data: AppRow },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiRowsRowId>>,
  TError,
  { rowId: string; data: AppRow },
  TContext
> => {
  const mutationKey = ["patchApiRowsRowId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiRowsRowId>>,
    { rowId: string; data: AppRow }
  > = (props) => {
    const { rowId, data } = props ?? {};

    return patchApiRowsRowId(rowId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiRowsRowIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiRowsRowId>>
>;
export type PatchApiRowsRowIdMutationBody = AppRow;
export type PatchApiRowsRowIdMutationError = AxiosError<void>;

/**
 * @summary Update a row
 */
export const usePatchApiRowsRowId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiRowsRowId>>,
    TError,
    { rowId: string; data: AppRow },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiRowsRowId>>,
  TError,
  { rowId: string; data: AppRow },
  TContext
> => {
  const mutationOptions = getPatchApiRowsRowIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Permanently deletes a row from a table
 * @summary Delete a row
 */
export const deleteApiRowsRowId = (
  rowId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppRow>> => {
  return axios.delete(`/api/api/rows/${rowId}`, options);
};

export const getDeleteApiRowsRowIdMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRowsRowId>>,
    TError,
    { rowId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiRowsRowId>>,
  TError,
  { rowId: string },
  TContext
> => {
  const mutationKey = ["deleteApiRowsRowId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiRowsRowId>>,
    { rowId: string }
  > = (props) => {
    const { rowId } = props ?? {};

    return deleteApiRowsRowId(rowId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiRowsRowIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiRowsRowId>>
>;

export type DeleteApiRowsRowIdMutationError = AxiosError<void>;

/**
 * @summary Delete a row
 */
export const useDeleteApiRowsRowId = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRowsRowId>>,
    TError,
    { rowId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiRowsRowId>>,
  TError,
  { rowId: string },
  TContext
> => {
  const mutationOptions = getDeleteApiRowsRowIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get all rows for a table
 */
export const getApiRows = (
  params: GetApiRowsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppRow[]>> => {
  return axios.get(`/api/api/rows`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetApiRowsQueryKey = (params: GetApiRowsParams) => {
  return [`/api/api/rows`, ...(params ? [params] : [])] as const;
};

export const getGetApiRowsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = AxiosError<void>,
>(
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRowsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRows>>> = ({
    signal,
  }) => getApiRows(params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRows>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiRowsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRows>>
>;
export type GetApiRowsQueryError = AxiosError<void>;

export function useGetApiRows<
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = AxiosError<void>,
>(
  params: GetApiRowsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRows>>,
          TError,
          Awaited<ReturnType<typeof getApiRows>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRows<
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = AxiosError<void>,
>(
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRows>>,
          TError,
          Awaited<ReturnType<typeof getApiRows>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRows<
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = AxiosError<void>,
>(
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all rows for a table
 */

export function useGetApiRows<
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = AxiosError<void>,
>(
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiRowsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all rows for a table
 */
export const prefetchGetApiRows = async <
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = AxiosError<void>,
>(
  queryClient: QueryClient,
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetApiRowsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create a new row
 */
export const postApiRows = (
  postApiRowsBody: PostApiRowsBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AppRow>> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append("tableId", postApiRowsBody.tableId);
  formUrlEncoded.append("data", JSON.stringify(postApiRowsBody.data));

  return axios.post(`/api/api/rows`, formUrlEncoded, options);
};

export const getPostApiRowsMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRows>>,
    TError,
    { data: PostApiRowsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRows>>,
  TError,
  { data: PostApiRowsBody },
  TContext
> => {
  const mutationKey = ["postApiRows"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRows>>,
    { data: PostApiRowsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRows(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRowsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRows>>
>;
export type PostApiRowsMutationBody = PostApiRowsBody;
export type PostApiRowsMutationError = AxiosError<void>;

/**
 * @summary Create a new row
 */
export const usePostApiRows = <
  TError = AxiosError<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRows>>,
    TError,
    { data: PostApiRowsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiRows>>,
  TError,
  { data: PostApiRowsBody },
  TContext
> => {
  const mutationOptions = getPostApiRowsMutationOptions(options);

  return useMutation(mutationOptions);
};
