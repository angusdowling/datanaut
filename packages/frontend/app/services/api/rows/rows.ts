/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateRowDto,
  GetRowsParams,
  RowDto,
  UpdateRowDto,
} from ".././model";

import { customFetch } from "../../../utilities/api";
import { useCustomMutatorOptions } from "../../../features/api/hooks/useCustomMutatorOptions";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getRowsResponse200 = {
  data: RowDto[];
  status: 200;
};

export type getRowsResponseComposite = getRowsResponse200;

export type getRowsResponse = getRowsResponseComposite & {
  headers: Headers;
};

export const getGetRowsUrl = (params?: GetRowsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/rows?${stringifiedParams}`
    : `/api/rows`;
};

export const getRows = async (
  params?: GetRowsParams,
  options?: RequestInit,
): Promise<getRowsResponse> => {
  return customFetch<getRowsResponse>(getGetRowsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetRowsQueryKey = (params?: GetRowsParams) => {
  return [`/api/rows`, ...(params ? [params] : [])] as const;
};

export const getGetRowsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRowsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRows>>> = ({
    signal,
  }) => getRows(params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetRowsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRows>>
>;
export type GetRowsQueryError = unknown;

export function useGetRows<
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params: undefined | GetRowsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRows>>,
          TError,
          Awaited<ReturnType<typeof getRows>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRows<
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRows>>,
          TError,
          Awaited<ReturnType<typeof getRows>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRows<
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetRows<
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRowsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetRows = async <
  TData = Awaited<ReturnType<typeof getRows>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRows>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetRowsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type postRowsResponse200 = {
  data: RowDto;
  status: 200;
};

export type postRowsResponseComposite = postRowsResponse200;

export type postRowsResponse = postRowsResponseComposite & {
  headers: Headers;
};

export const getPostRowsUrl = () => {
  return `/api/rows`;
};

export const postRows = async (
  createRowDto: CreateRowDto,
  options?: RequestInit,
): Promise<postRowsResponse> => {
  return customFetch<postRowsResponse>(getPostRowsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createRowDto),
  });
};

export const usePostRowsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRows>>,
    TError,
    { data: CreateRowDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postRows>>,
  TError,
  { data: CreateRowDto },
  TContext
> => {
  const mutationKey = ["postRows"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postRows>>,
    { data: CreateRowDto }
  > = (props) => {
    const { data } = props ?? {};

    return postRows(data, requestOptions);
  };

  const customOptions = useCustomMutatorOptions(
    { ...mutationOptions, mutationFn },
    { url: `/api/rows` },
    { operationId: "PostRows", operationName: "postRows" },
  );

  return customOptions;
};

export type PostRowsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postRows>>
>;
export type PostRowsMutationBody = CreateRowDto;
export type PostRowsMutationError = unknown;

export const usePostRows = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postRows>>,
    TError,
    { data: CreateRowDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postRows>>,
  TError,
  { data: CreateRowDto },
  TContext
> => {
  const mutationOptions = usePostRowsMutationOptions(options);

  return useMutation(mutationOptions);
};
export type getRowsIdResponse200 = {
  data: RowDto;
  status: 200;
};

export type getRowsIdResponseComposite = getRowsIdResponse200;

export type getRowsIdResponse = getRowsIdResponseComposite & {
  headers: Headers;
};

export const getGetRowsIdUrl = (id: string) => {
  return `/api/rows/${id}`;
};

export const getRowsId = async (
  id: string,
  options?: RequestInit,
): Promise<getRowsIdResponse> => {
  return customFetch<getRowsIdResponse>(getGetRowsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetRowsIdQueryKey = (id: string) => {
  return [`/api/rows/${id}`] as const;
};

export const getGetRowsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRowsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRowsId>>> = ({
    signal,
  }) => getRowsId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetRowsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRowsId>>
>;
export type GetRowsIdQueryError = unknown;

export function useGetRowsId<
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRowsId>>,
          TError,
          Awaited<ReturnType<typeof getRowsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRowsId<
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRowsId>>,
          TError,
          Awaited<ReturnType<typeof getRowsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRowsId<
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetRowsId<
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRowsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetRowsId = async <
  TData = Awaited<ReturnType<typeof getRowsId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRowsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetRowsIdQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type patchRowsIdResponse200 = {
  data: RowDto;
  status: 200;
};

export type patchRowsIdResponseComposite = patchRowsIdResponse200;

export type patchRowsIdResponse = patchRowsIdResponseComposite & {
  headers: Headers;
};

export const getPatchRowsIdUrl = (id: string) => {
  return `/api/rows/${id}`;
};

export const patchRowsId = async (
  id: string,
  updateRowDto: UpdateRowDto,
  options?: RequestInit,
): Promise<patchRowsIdResponse> => {
  return customFetch<patchRowsIdResponse>(getPatchRowsIdUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateRowDto),
  });
};

export const usePatchRowsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRowsId>>,
    TError,
    { id: string; data: UpdateRowDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchRowsId>>,
  TError,
  { id: string; data: UpdateRowDto },
  TContext
> => {
  const mutationKey = ["patchRowsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchRowsId>>,
    { id: string; data: UpdateRowDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchRowsId(id, data, requestOptions);
  };

  const customOptions = useCustomMutatorOptions(
    { ...mutationOptions, mutationFn },
    { url: `/api/rows/{id}` },
    { operationId: "PatchRowsId", operationName: "patchRowsId" },
  );

  return customOptions;
};

export type PatchRowsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchRowsId>>
>;
export type PatchRowsIdMutationBody = UpdateRowDto;
export type PatchRowsIdMutationError = unknown;

export const usePatchRowsId = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchRowsId>>,
    TError,
    { id: string; data: UpdateRowDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchRowsId>>,
  TError,
  { id: string; data: UpdateRowDto },
  TContext
> => {
  const mutationOptions = usePatchRowsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export type deleteRowsIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteRowsIdResponseComposite = deleteRowsIdResponse200;

export type deleteRowsIdResponse = deleteRowsIdResponseComposite & {
  headers: Headers;
};

export const getDeleteRowsIdUrl = (id: string) => {
  return `/api/rows/${id}`;
};

export const deleteRowsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteRowsIdResponse> => {
  return customFetch<deleteRowsIdResponse>(getDeleteRowsIdUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const useDeleteRowsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRowsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRowsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteRowsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRowsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteRowsId(id, requestOptions);
  };

  const customOptions = useCustomMutatorOptions(
    { ...mutationOptions, mutationFn },
    { url: `/api/rows/{id}` },
    { operationId: "DeleteRowsId", operationName: "deleteRowsId" },
  );

  return customOptions;
};

export type DeleteRowsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRowsId>>
>;

export type DeleteRowsIdMutationError = unknown;

export const useDeleteRowsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRowsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRowsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = useDeleteRowsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
