/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Datanaut API
 * Datanaut is a cloud-based platform that combines the functionality of a spreadsheet with a database, allowing users to organize, collaborate on, and customize data in a visually intuitive interface
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { AppRow, GetApiRowsParams, PostApiRowsBody } from ".././model";

/**
 * Updates properties of an existing row
 * @summary Update a row
 */
export type patchApiRowsRowIdResponse200 = {
  data: AppRow;
  status: 200;
};

export type patchApiRowsRowIdResponse400 = {
  data: void;
  status: 400;
};

export type patchApiRowsRowIdResponseComposite =
  | patchApiRowsRowIdResponse200
  | patchApiRowsRowIdResponse400;

export type patchApiRowsRowIdResponse = patchApiRowsRowIdResponseComposite & {
  headers: Headers;
};

export const getPatchApiRowsRowIdUrl = (rowId: string) => {
  return `http://localhost:5173/api/rows/${rowId}`;
};

export const patchApiRowsRowId = async (
  rowId: string,
  appRow: AppRow,
  options?: RequestInit,
): Promise<patchApiRowsRowIdResponse> => {
  const res = await fetch(getPatchApiRowsRowIdUrl(rowId), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(appRow),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: patchApiRowsRowIdResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as patchApiRowsRowIdResponse;
};

export const getPatchApiRowsRowIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiRowsRowId>>,
    TError,
    { rowId: string; data: AppRow },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiRowsRowId>>,
  TError,
  { rowId: string; data: AppRow },
  TContext
> => {
  const mutationKey = ["patchApiRowsRowId"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiRowsRowId>>,
    { rowId: string; data: AppRow }
  > = (props) => {
    const { rowId, data } = props ?? {};

    return patchApiRowsRowId(rowId, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiRowsRowIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiRowsRowId>>
>;
export type PatchApiRowsRowIdMutationBody = AppRow;
export type PatchApiRowsRowIdMutationError = void;

/**
 * @summary Update a row
 */
export const usePatchApiRowsRowId = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiRowsRowId>>,
    TError,
    { rowId: string; data: AppRow },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiRowsRowId>>,
  TError,
  { rowId: string; data: AppRow },
  TContext
> => {
  const mutationOptions = getPatchApiRowsRowIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Permanently deletes a row from a table
 * @summary Delete a row
 */
export type deleteApiRowsRowIdResponse200 = {
  data: AppRow;
  status: 200;
};

export type deleteApiRowsRowIdResponse400 = {
  data: void;
  status: 400;
};

export type deleteApiRowsRowIdResponseComposite =
  | deleteApiRowsRowIdResponse200
  | deleteApiRowsRowIdResponse400;

export type deleteApiRowsRowIdResponse = deleteApiRowsRowIdResponseComposite & {
  headers: Headers;
};

export const getDeleteApiRowsRowIdUrl = (rowId: string) => {
  return `http://localhost:5173/api/rows/${rowId}`;
};

export const deleteApiRowsRowId = async (
  rowId: string,
  options?: RequestInit,
): Promise<deleteApiRowsRowIdResponse> => {
  const res = await fetch(getDeleteApiRowsRowIdUrl(rowId), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: deleteApiRowsRowIdResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as deleteApiRowsRowIdResponse;
};

export const getDeleteApiRowsRowIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRowsRowId>>,
    TError,
    { rowId: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiRowsRowId>>,
  TError,
  { rowId: string },
  TContext
> => {
  const mutationKey = ["deleteApiRowsRowId"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiRowsRowId>>,
    { rowId: string }
  > = (props) => {
    const { rowId } = props ?? {};

    return deleteApiRowsRowId(rowId, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiRowsRowIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiRowsRowId>>
>;

export type DeleteApiRowsRowIdMutationError = void;

/**
 * @summary Delete a row
 */
export const useDeleteApiRowsRowId = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiRowsRowId>>,
    TError,
    { rowId: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiRowsRowId>>,
  TError,
  { rowId: string },
  TContext
> => {
  const mutationOptions = getDeleteApiRowsRowIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get all rows for a table
 */
export type getApiRowsResponse200 = {
  data: AppRow[];
  status: 200;
};

export type getApiRowsResponse400 = {
  data: void;
  status: 400;
};

export type getApiRowsResponseComposite =
  | getApiRowsResponse200
  | getApiRowsResponse400;

export type getApiRowsResponse = getApiRowsResponseComposite & {
  headers: Headers;
};

export const getGetApiRowsUrl = (params: GetApiRowsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:5173/api/rows?${stringifiedParams}`
    : `http://localhost:5173/api/rows`;
};

export const getApiRows = async (
  params: GetApiRowsParams,
  options?: RequestInit,
): Promise<getApiRowsResponse> => {
  const res = await fetch(getGetApiRowsUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getApiRowsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getApiRowsResponse;
};

export const getGetApiRowsQueryKey = (params: GetApiRowsParams) => {
  return [
    `http://localhost:5173/api/rows`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiRowsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = void,
>(
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiRowsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiRows>>> = ({
    signal,
  }) => getApiRows(params, { signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiRows>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiRowsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiRows>>
>;
export type GetApiRowsQueryError = void;

export function useGetApiRows<
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = void,
>(
  params: GetApiRowsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRows>>,
          TError,
          Awaited<ReturnType<typeof getApiRows>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRows<
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = void,
>(
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiRows>>,
          TError,
          Awaited<ReturnType<typeof getApiRows>>
        >,
        "initialData"
      >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiRows<
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = void,
>(
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all rows for a table
 */

export function useGetApiRows<
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = void,
>(
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiRowsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all rows for a table
 */
export const prefetchGetApiRows = async <
  TData = Awaited<ReturnType<typeof getApiRows>>,
  TError = void,
>(
  queryClient: QueryClient,
  params: GetApiRowsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiRows>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetApiRowsQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create a new row
 */
export type postApiRowsResponse200 = {
  data: AppRow;
  status: 200;
};

export type postApiRowsResponse400 = {
  data: void;
  status: 400;
};

export type postApiRowsResponseComposite =
  | postApiRowsResponse200
  | postApiRowsResponse400;

export type postApiRowsResponse = postApiRowsResponseComposite & {
  headers: Headers;
};

export const getPostApiRowsUrl = () => {
  return `http://localhost:5173/api/rows`;
};

export const postApiRows = async (
  postApiRowsBody: PostApiRowsBody,
  options?: RequestInit,
): Promise<postApiRowsResponse> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append("tableId", postApiRowsBody.tableId);
  formUrlEncoded.append("data", JSON.stringify(postApiRowsBody.data));

  const res = await fetch(getPostApiRowsUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postApiRowsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postApiRowsResponse;
};

export const getPostApiRowsMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRows>>,
    TError,
    { data: PostApiRowsBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiRows>>,
  TError,
  { data: PostApiRowsBody },
  TContext
> => {
  const mutationKey = ["postApiRows"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiRows>>,
    { data: PostApiRowsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiRows(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiRowsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiRows>>
>;
export type PostApiRowsMutationBody = PostApiRowsBody;
export type PostApiRowsMutationError = void;

/**
 * @summary Create a new row
 */
export const usePostApiRows = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiRows>>,
    TError,
    { data: PostApiRowsBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiRows>>,
  TError,
  { data: PostApiRowsBody },
  TContext
> => {
  const mutationOptions = getPostApiRowsMutationOptions(options);

  return useMutation(mutationOptions);
};
