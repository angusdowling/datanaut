/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  AuthResponse,
  LoginRequest,
  LoginResponse,
  VerifyRequest,
} from ".././model";

import { customFetch } from "../../../utilities/api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type postAuthLoginResponse200 = {
  data: LoginResponse;
  status: 200;
};

export type postAuthLoginResponseComposite = postAuthLoginResponse200;

export type postAuthLoginResponse = postAuthLoginResponseComposite & {
  headers: Headers;
};

export const getPostAuthLoginUrl = () => {
  return `/api/auth/login`;
};

export const postAuthLogin = async (
  loginRequest: LoginRequest,
  options?: RequestInit,
): Promise<postAuthLoginResponse> => {
  return customFetch<postAuthLoginResponse>(getPostAuthLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(loginRequest),
  });
};

export const getPostAuthLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["postAuthLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogin>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationBody = LoginRequest;
export type PostAuthLoginMutationError = unknown;

export const usePostAuthLogin = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
export type postAuthVerifyResponse200 = {
  data: AuthResponse;
  status: 200;
};

export type postAuthVerifyResponseComposite = postAuthVerifyResponse200;

export type postAuthVerifyResponse = postAuthVerifyResponseComposite & {
  headers: Headers;
};

export const getPostAuthVerifyUrl = () => {
  return `/api/auth/verify`;
};

export const postAuthVerify = async (
  verifyRequest: VerifyRequest,
  options?: RequestInit,
): Promise<postAuthVerifyResponse> => {
  return customFetch<postAuthVerifyResponse>(getPostAuthVerifyUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(verifyRequest),
  });
};

export const getPostAuthVerifyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthVerify>>,
    TError,
    { data: VerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthVerify>>,
  TError,
  { data: VerifyRequest },
  TContext
> => {
  const mutationKey = ["postAuthVerify"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthVerify>>,
    { data: VerifyRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthVerify(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthVerifyMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthVerify>>
>;
export type PostAuthVerifyMutationBody = VerifyRequest;
export type PostAuthVerifyMutationError = unknown;

export const usePostAuthVerify = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthVerify>>,
    TError,
    { data: VerifyRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAuthVerify>>,
  TError,
  { data: VerifyRequest },
  TContext
> => {
  const mutationOptions = getPostAuthVerifyMutationOptions(options);

  return useMutation(mutationOptions);
};
