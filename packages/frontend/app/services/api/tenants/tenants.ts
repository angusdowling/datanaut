/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { CreateTenantRequest, Tenant } from ".././model";

import { customFetch } from "../../../utilities/api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getTenantsResponse200 = {
  data: Tenant[];
  status: 200;
};

export type getTenantsResponseComposite = getTenantsResponse200;

export type getTenantsResponse = getTenantsResponseComposite & {
  headers: Headers;
};

export const getGetTenantsUrl = () => {
  return `/api/tenants`;
};

export const getTenants = async (
  options?: RequestInit,
): Promise<getTenantsResponse> => {
  return customFetch<getTenantsResponse>(getGetTenantsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetTenantsQueryKey = () => {
  return [`/api/tenants`] as const;
};

export const getGetTenantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTenantsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTenants>>> = ({
    signal,
  }) => getTenants({ signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTenants>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTenantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTenants>>
>;
export type GetTenantsQueryError = unknown;

export function useGetTenants<
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getTenants>>,
        TError,
        Awaited<ReturnType<typeof getTenants>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTenants<
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getTenants>>,
        TError,
        Awaited<ReturnType<typeof getTenants>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTenants<
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTenants<
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTenantsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetTenants = async <
  TData = Awaited<ReturnType<typeof getTenants>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenants>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetTenantsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type postTenantsResponse200 = {
  data: Tenant;
  status: 200;
};

export type postTenantsResponseComposite = postTenantsResponse200;

export type postTenantsResponse = postTenantsResponseComposite & {
  headers: Headers;
};

export const getPostTenantsUrl = () => {
  return `/api/tenants`;
};

export const postTenants = async (
  createTenantRequest: CreateTenantRequest,
  options?: RequestInit,
): Promise<postTenantsResponse> => {
  return customFetch<postTenantsResponse>(getPostTenantsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createTenantRequest),
  });
};

export const getPostTenantsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTenants>>,
    TError,
    { data: CreateTenantRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTenants>>,
  TError,
  { data: CreateTenantRequest },
  TContext
> => {
  const mutationKey = ["postTenants"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTenants>>,
    { data: CreateTenantRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postTenants(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTenantsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTenants>>
>;
export type PostTenantsMutationBody = CreateTenantRequest;
export type PostTenantsMutationError = unknown;

export const usePostTenants = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTenants>>,
    TError,
    { data: CreateTenantRequest },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postTenants>>,
  TError,
  { data: CreateTenantRequest },
  TContext
> => {
  const mutationOptions = getPostTenantsMutationOptions(options);

  return useMutation(mutationOptions);
};
export type getTenantsIdResponse200 = {
  data: Tenant;
  status: 200;
};

export type getTenantsIdResponseComposite = getTenantsIdResponse200;

export type getTenantsIdResponse = getTenantsIdResponseComposite & {
  headers: Headers;
};

export const getGetTenantsIdUrl = (id: string) => {
  return `/api/tenants/${id}`;
};

export const getTenantsId = async (
  id: string,
  options?: RequestInit,
): Promise<getTenantsIdResponse> => {
  return customFetch<getTenantsIdResponse>(getGetTenantsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetTenantsIdQueryKey = (id: string) => {
  return [`/api/tenants/${id}`] as const;
};

export const getGetTenantsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTenantsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTenantsId>>> = ({
    signal,
  }) => getTenantsId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTenantsId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTenantsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTenantsId>>
>;
export type GetTenantsIdQueryError = unknown;

export function useGetTenantsId<
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantsId>>,
          TError,
          Awaited<ReturnType<typeof getTenantsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTenantsId<
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTenantsId>>,
          TError,
          Awaited<ReturnType<typeof getTenantsId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTenantsId<
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTenantsId<
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTenantsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetTenantsId = async <
  TData = Awaited<ReturnType<typeof getTenantsId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTenantsId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetTenantsIdQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type patchTenantsIdResponse200 = {
  data: Tenant;
  status: 200;
};

export type patchTenantsIdResponseComposite = patchTenantsIdResponse200;

export type patchTenantsIdResponse = patchTenantsIdResponseComposite & {
  headers: Headers;
};

export const getPatchTenantsIdUrl = (id: string) => {
  return `/api/tenants/${id}`;
};

export const patchTenantsId = async (
  id: string,
  tenant: Tenant,
  options?: RequestInit,
): Promise<patchTenantsIdResponse> => {
  return customFetch<patchTenantsIdResponse>(getPatchTenantsIdUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(tenant),
  });
};

export const getPatchTenantsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTenantsId>>,
    TError,
    { id: string; data: Tenant },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchTenantsId>>,
  TError,
  { id: string; data: Tenant },
  TContext
> => {
  const mutationKey = ["patchTenantsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchTenantsId>>,
    { id: string; data: Tenant }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchTenantsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchTenantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchTenantsId>>
>;
export type PatchTenantsIdMutationBody = Tenant;
export type PatchTenantsIdMutationError = unknown;

export const usePatchTenantsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTenantsId>>,
    TError,
    { id: string; data: Tenant },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchTenantsId>>,
  TError,
  { id: string; data: Tenant },
  TContext
> => {
  const mutationOptions = getPatchTenantsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export type deleteTenantsIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteTenantsIdResponseComposite = deleteTenantsIdResponse200;

export type deleteTenantsIdResponse = deleteTenantsIdResponseComposite & {
  headers: Headers;
};

export const getDeleteTenantsIdUrl = (id: string) => {
  return `/api/tenants/${id}`;
};

export const deleteTenantsId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteTenantsIdResponse> => {
  return customFetch<deleteTenantsIdResponse>(getDeleteTenantsIdUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteTenantsIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTenantsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTenantsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTenantsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTenantsId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTenantsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTenantsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTenantsId>>
>;

export type DeleteTenantsIdMutationError = unknown;

export const useDeleteTenantsId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTenantsId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTenantsId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTenantsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
