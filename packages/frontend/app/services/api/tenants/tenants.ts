/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Datanaut API
 * Datanaut is a cloud-based platform that combines the functionality of a spreadsheet with a database, allowing users to organize, collaborate on, and customize data in a visually intuitive interface
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  PatchApiTenantsTenantIdBody,
  PostApiTenantsBody,
  Tenant,
} from ".././model";

/**
 * @summary Update a tenant
 */
export type patchApiTenantsTenantIdResponse200 = {
  data: Tenant;
  status: 200;
};

export type patchApiTenantsTenantIdResponse400 = {
  data: void;
  status: 400;
};

export type patchApiTenantsTenantIdResponseComposite =
  | patchApiTenantsTenantIdResponse200
  | patchApiTenantsTenantIdResponse400;

export type patchApiTenantsTenantIdResponse =
  patchApiTenantsTenantIdResponseComposite & {
    headers: Headers;
  };

export const getPatchApiTenantsTenantIdUrl = (tenantId: string) => {
  return `http://localhost:5173/api/tenants/${tenantId}`;
};

export const patchApiTenantsTenantId = async (
  tenantId: string,
  patchApiTenantsTenantIdBody: PatchApiTenantsTenantIdBody,
  options?: RequestInit,
): Promise<patchApiTenantsTenantIdResponse> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append(
    "data",
    JSON.stringify(patchApiTenantsTenantIdBody.data),
  );

  const res = await fetch(getPatchApiTenantsTenantIdUrl(tenantId), {
    ...options,
    method: "PATCH",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: patchApiTenantsTenantIdResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as patchApiTenantsTenantIdResponse;
};

export const getPatchApiTenantsTenantIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiTenantsTenantId>>,
    TError,
    { tenantId: string; data: PatchApiTenantsTenantIdBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiTenantsTenantId>>,
  TError,
  { tenantId: string; data: PatchApiTenantsTenantIdBody },
  TContext
> => {
  const mutationKey = ["patchApiTenantsTenantId"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiTenantsTenantId>>,
    { tenantId: string; data: PatchApiTenantsTenantIdBody }
  > = (props) => {
    const { tenantId, data } = props ?? {};

    return patchApiTenantsTenantId(tenantId, data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiTenantsTenantIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiTenantsTenantId>>
>;
export type PatchApiTenantsTenantIdMutationBody = PatchApiTenantsTenantIdBody;
export type PatchApiTenantsTenantIdMutationError = void;

/**
 * @summary Update a tenant
 */
export const usePatchApiTenantsTenantId = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiTenantsTenantId>>,
    TError,
    { tenantId: string; data: PatchApiTenantsTenantIdBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiTenantsTenantId>>,
  TError,
  { tenantId: string; data: PatchApiTenantsTenantIdBody },
  TContext
> => {
  const mutationOptions = getPatchApiTenantsTenantIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete a tenant
 */
export type deleteApiTenantsTenantIdResponse200 = {
  data: Tenant;
  status: 200;
};

export type deleteApiTenantsTenantIdResponse400 = {
  data: void;
  status: 400;
};

export type deleteApiTenantsTenantIdResponseComposite =
  | deleteApiTenantsTenantIdResponse200
  | deleteApiTenantsTenantIdResponse400;

export type deleteApiTenantsTenantIdResponse =
  deleteApiTenantsTenantIdResponseComposite & {
    headers: Headers;
  };

export const getDeleteApiTenantsTenantIdUrl = (tenantId: string) => {
  return `http://localhost:5173/api/tenants/${tenantId}`;
};

export const deleteApiTenantsTenantId = async (
  tenantId: string,
  options?: RequestInit,
): Promise<deleteApiTenantsTenantIdResponse> => {
  const res = await fetch(getDeleteApiTenantsTenantIdUrl(tenantId), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: deleteApiTenantsTenantIdResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as deleteApiTenantsTenantIdResponse;
};

export const getDeleteApiTenantsTenantIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiTenantsTenantId>>,
    TError,
    { tenantId: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiTenantsTenantId>>,
  TError,
  { tenantId: string },
  TContext
> => {
  const mutationKey = ["deleteApiTenantsTenantId"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiTenantsTenantId>>,
    { tenantId: string }
  > = (props) => {
    const { tenantId } = props ?? {};

    return deleteApiTenantsTenantId(tenantId, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiTenantsTenantIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiTenantsTenantId>>
>;

export type DeleteApiTenantsTenantIdMutationError = void;

/**
 * @summary Delete a tenant
 */
export const useDeleteApiTenantsTenantId = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiTenantsTenantId>>,
    TError,
    { tenantId: string },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiTenantsTenantId>>,
  TError,
  { tenantId: string },
  TContext
> => {
  const mutationOptions = getDeleteApiTenantsTenantIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Returns a list of all tenants accessible to the user.
 * @summary Get all tenants
 */
export type getApiTenantsResponse200 = {
  data: Tenant[];
  status: 200;
};

export type getApiTenantsResponseComposite = getApiTenantsResponse200;

export type getApiTenantsResponse = getApiTenantsResponseComposite & {
  headers: Headers;
};

export const getGetApiTenantsUrl = () => {
  return `http://localhost:5173/api/tenants`;
};

export const getApiTenants = async (
  options?: RequestInit,
): Promise<getApiTenantsResponse> => {
  const res = await fetch(getGetApiTenantsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getApiTenantsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getApiTenantsResponse;
};

export const getGetApiTenantsQueryKey = () => {
  return [`http://localhost:5173/api/tenants`] as const;
};

export const getGetApiTenantsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiTenantsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiTenants>>> = ({
    signal,
  }) => getApiTenants({ signal, ...fetchOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiTenants>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiTenantsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiTenants>>
>;
export type GetApiTenantsQueryError = unknown;

export function useGetApiTenants<
  TData = Awaited<ReturnType<typeof getApiTenants>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiTenants>>,
        TError,
        Awaited<ReturnType<typeof getApiTenants>>
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTenants<
  TData = Awaited<ReturnType<typeof getApiTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiTenants>>,
        TError,
        Awaited<ReturnType<typeof getApiTenants>>
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiTenants<
  TData = Awaited<ReturnType<typeof getApiTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all tenants
 */

export function useGetApiTenants<
  TData = Awaited<ReturnType<typeof getApiTenants>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiTenantsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get all tenants
 */
export const prefetchGetApiTenants = async <
  TData = Awaited<ReturnType<typeof getApiTenants>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiTenants>>, TError, TData>
    >;
    fetch?: RequestInit;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetApiTenantsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary Create a new tenant
 */
export type postApiTenantsResponse200 = {
  data: Tenant;
  status: 200;
};

export type postApiTenantsResponse400 = {
  data: void;
  status: 400;
};

export type postApiTenantsResponseComposite =
  | postApiTenantsResponse200
  | postApiTenantsResponse400;

export type postApiTenantsResponse = postApiTenantsResponseComposite & {
  headers: Headers;
};

export const getPostApiTenantsUrl = () => {
  return `http://localhost:5173/api/tenants`;
};

export const postApiTenants = async (
  postApiTenantsBody: PostApiTenantsBody,
  options?: RequestInit,
): Promise<postApiTenantsResponse> => {
  const formUrlEncoded = new URLSearchParams();
  formUrlEncoded.append("data", JSON.stringify(postApiTenantsBody.data));

  const res = await fetch(getPostApiTenantsUrl(), {
    ...options,
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    body: formUrlEncoded,
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postApiTenantsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postApiTenantsResponse;
};

export const getPostApiTenantsMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTenants>>,
    TError,
    { data: PostApiTenantsBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiTenants>>,
  TError,
  { data: PostApiTenantsBody },
  TContext
> => {
  const mutationKey = ["postApiTenants"];
  const { mutation: mutationOptions, fetch: fetchOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, fetch: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiTenants>>,
    { data: PostApiTenantsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiTenants(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiTenantsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiTenants>>
>;
export type PostApiTenantsMutationBody = PostApiTenantsBody;
export type PostApiTenantsMutationError = void;

/**
 * @summary Create a new tenant
 */
export const usePostApiTenants = <TError = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiTenants>>,
    TError,
    { data: PostApiTenantsBody },
    TContext
  >;
  fetch?: RequestInit;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiTenants>>,
  TError,
  { data: PostApiTenantsBody },
  TContext
> => {
  const mutationOptions = getPostApiTenantsMutationOptions(options);

  return useMutation(mutationOptions);
};
