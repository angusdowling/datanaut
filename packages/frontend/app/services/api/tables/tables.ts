/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateTableDto,
  GetTablesParams,
  TableDto,
  UpdateTableDto,
} from ".././model";

import { customFetch } from "../../../utilities/api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type getTablesResponse200 = {
  data: TableDto[];
  status: 200;
};

export type getTablesResponseComposite = getTablesResponse200;

export type getTablesResponse = getTablesResponseComposite & {
  headers: Headers;
};

export const getGetTablesUrl = (params?: GetTablesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/tables?${stringifiedParams}`
    : `/api/tables`;
};

export const getTables = async (
  params?: GetTablesParams,
  options?: RequestInit,
): Promise<getTablesResponse> => {
  return customFetch<getTablesResponse>(getGetTablesUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetTablesQueryKey = (params?: GetTablesParams) => {
  return [`/api/tables`, ...(params ? [params] : [])] as const;
};

export const getGetTablesQueryOptions = <
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTablesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTables>>> = ({
    signal,
  }) => getTables(params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetTablesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTables>>
>;
export type GetTablesQueryError = unknown;

export function useGetTables<
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params: undefined | GetTablesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTables>>,
          TError,
          Awaited<ReturnType<typeof getTables>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTables<
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTables>>,
          TError,
          Awaited<ReturnType<typeof getTables>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTables<
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTables<
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTablesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetTables = async <
  TData = Awaited<ReturnType<typeof getTables>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  params?: GetTablesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTables>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetTablesQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type postTablesResponse200 = {
  data: TableDto;
  status: 200;
};

export type postTablesResponseComposite = postTablesResponse200;

export type postTablesResponse = postTablesResponseComposite & {
  headers: Headers;
};

export const getPostTablesUrl = () => {
  return `/api/tables`;
};

export const postTables = async (
  createTableDto: CreateTableDto,
  options?: RequestInit,
): Promise<postTablesResponse> => {
  return customFetch<postTablesResponse>(getPostTablesUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createTableDto),
  });
};

export const getPostTablesMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTables>>,
    TError,
    { data: CreateTableDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTables>>,
  TError,
  { data: CreateTableDto },
  TContext
> => {
  const mutationKey = ["postTables"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTables>>,
    { data: CreateTableDto }
  > = (props) => {
    const { data } = props ?? {};

    return postTables(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTablesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTables>>
>;
export type PostTablesMutationBody = CreateTableDto;
export type PostTablesMutationError = unknown;

export const usePostTables = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTables>>,
    TError,
    { data: CreateTableDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postTables>>,
  TError,
  { data: CreateTableDto },
  TContext
> => {
  const mutationOptions = getPostTablesMutationOptions(options);

  return useMutation(mutationOptions);
};
export type getTablesIdResponse200 = {
  data: TableDto;
  status: 200;
};

export type getTablesIdResponseComposite = getTablesIdResponse200;

export type getTablesIdResponse = getTablesIdResponseComposite & {
  headers: Headers;
};

export const getGetTablesIdUrl = (id: string) => {
  return `/api/tables/${id}`;
};

export const getTablesId = async (
  id: string,
  options?: RequestInit,
): Promise<getTablesIdResponse> => {
  return customFetch<getTablesIdResponse>(getGetTablesIdUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetTablesIdQueryKey = (id: string) => {
  return [`/api/tables/${id}`] as const;
};

export const getGetTablesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTablesIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTablesId>>> = ({
    signal,
  }) => getTablesId(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTablesId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTablesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTablesId>>
>;
export type GetTablesIdQueryError = unknown;

export function useGetTablesId<
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTablesId>>,
          TError,
          Awaited<ReturnType<typeof getTablesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTablesId<
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTablesId>>,
          TError,
          Awaited<ReturnType<typeof getTablesId>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTablesId<
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTablesId<
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTablesIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetTablesId = async <
  TData = Awaited<ReturnType<typeof getTablesId>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTablesId>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetTablesIdQueryOptions(id, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export type patchTablesIdResponse200 = {
  data: TableDto;
  status: 200;
};

export type patchTablesIdResponseComposite = patchTablesIdResponse200;

export type patchTablesIdResponse = patchTablesIdResponseComposite & {
  headers: Headers;
};

export const getPatchTablesIdUrl = (id: string) => {
  return `/api/tables/${id}`;
};

export const patchTablesId = async (
  id: string,
  updateTableDto: UpdateTableDto,
  options?: RequestInit,
): Promise<patchTablesIdResponse> => {
  return customFetch<patchTablesIdResponse>(getPatchTablesIdUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateTableDto),
  });
};

export const getPatchTablesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTablesId>>,
    TError,
    { id: string; data: UpdateTableDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchTablesId>>,
  TError,
  { id: string; data: UpdateTableDto },
  TContext
> => {
  const mutationKey = ["patchTablesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchTablesId>>,
    { id: string; data: UpdateTableDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchTablesId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchTablesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchTablesId>>
>;
export type PatchTablesIdMutationBody = UpdateTableDto;
export type PatchTablesIdMutationError = unknown;

export const usePatchTablesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchTablesId>>,
    TError,
    { id: string; data: UpdateTableDto },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchTablesId>>,
  TError,
  { id: string; data: UpdateTableDto },
  TContext
> => {
  const mutationOptions = getPatchTablesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export type deleteTablesIdResponse200 = {
  data: void;
  status: 200;
};

export type deleteTablesIdResponseComposite = deleteTablesIdResponse200;

export type deleteTablesIdResponse = deleteTablesIdResponseComposite & {
  headers: Headers;
};

export const getDeleteTablesIdUrl = (id: string) => {
  return `/api/tables/${id}`;
};

export const deleteTablesId = async (
  id: string,
  options?: RequestInit,
): Promise<deleteTablesIdResponse> => {
  return customFetch<deleteTablesIdResponse>(getDeleteTablesIdUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteTablesIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTablesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTablesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTablesId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTablesId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTablesId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTablesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTablesId>>
>;

export type DeleteTablesIdMutationError = unknown;

export const useDeleteTablesId = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTablesId>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTablesId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTablesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
